const GuildConfig = require('../../localdata/models/guildconfigs.js');
const { CommandOptions, CommandTags, CommandManager, CommandOptionSolver } = require('../Commons/commands');
const { p_pure } = require('../../localdata/customization/prefixes.js');
const { isNotModerator, fetchUserID, navigationRows, edlDistance, shortenText, compressId, decompressId } = require('../../func.js');
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, TextInputBuilder, CommandInteraction, ButtonInteraction, ButtonStyle, TextInputStyle, Colors, ModalBuilder, AttachmentBuilder, ModalSubmitInteraction, StringSelectMenuBuilder, CommandInteractionOptionResolver, Message, ChatInputCommandInteraction } = require('discord.js');
const { RuntimeToLanguageType } = require('../../systems/ps/commons.js');
const { executeTuber } = require('../../systems/purescript.js');
const { makeButtonRowBuilder, makeTextInputRowBuilder } = require('../../tsCasts.js');

const pageMax = 10;
const filters = {
	AUTHOR: {
		label: 'Autor',
		placeholder: 'Ej: @Bot de Pur√©#9243 / 651250669390528561',
	},
	TID: {
		label: 'TuberID',
		placeholder: 'Identificador de Tub√©rculo existente',
	},
};

/**
 * Retorna un arreglo de ActionRowBuilders en respecto a la p√°gina actual y si la navegaci√≥n por p√°gina est√° permitida
 * @param {Number} page 
 * @param {Number} lastPage 
 * @param {Boolean} [navigationEnabled=true] 
 */
function paginationRows(page, lastPage, navigationEnabled = true) {
	/**@type {Array<ActionRowBuilder<ButtonBuilder>|ActionRowBuilder<StringSelectMenuBuilder>>}*/
	const rows = [];

	if(navigationEnabled)
		rows.push(...navigationRows('tub√©rculo', page, lastPage));

	rows.push(
		makeButtonRowBuilder().addComponents(
			new ButtonBuilder()
				.setCustomId('tub√©rculo_filterItems_AUTHOR')
				.setLabel('Filtrar Autor')
				.setEmoji('936530498061213756')
				.setStyle(ButtonStyle.Success),
			new ButtonBuilder()
				.setCustomId('tub√©rculo_filterItems_TID')
				.setLabel('Filtrar TuberID')
				.setEmoji('936530498061213756')
				.setStyle(ButtonStyle.Success),
			new ButtonBuilder()
				.setCustomId('tub√©rculo_filterClear')
				.setLabel('Mostrar todo')
				.setEmoji('936531643496288288')
				.setStyle(ButtonStyle.Danger),
		),
	);
	return rows;
}
const helpRows = () => [
	makeButtonRowBuilder().addComponents(
		new ButtonBuilder()
			.setURL('https://drive.google.com/drive/folders/1wv2-n4J5SSZNH9oQ5gNEPpptm7rNFEnV?usp=share_link')
			.setLabel('Aprende Pur√©Script')
			.setEmoji('üìñ')
			.setStyle(ButtonStyle.Link),
	)
];

/**
 * @param {import('discord.js').Guild} guild 
 * @param {String} [content] 
 */
async function getItemsList(guild, content = undefined) {
	const gcfg = await GuildConfig.findOne({ guildId: guild.id });
	let items = Object.entries(gcfg.tubers).reverse();
	if(content) {
		const filter = content.split(': ');
		const [ target, value ] = filter;
		if(target === 'Autor')
			items = items.filter(([_,tuber]) => tuber.author === value);
		else
			items = items.filter(([tid,_]) => tid.toLowerCase().indexOf(value) !== -1);
	}

	const lastPage = Math.ceil(items.length / pageMax) - 1;
	
	return { items, lastPage };
}

/**
 * @param {import('discord.js').ButtonInteraction | import('discord.js').SelectMenuInteraction | ModalSubmitInteraction} interaction 
 * @param {Number} page 
 * @param {String} [setFilter]
 */
async function loadPageNumber(interaction, page, setFilter = undefined) {
	const { guild, message } = interaction;
	const { items, lastPage } = await getItemsList(guild, setFilter ?? message.content);
	const members = guild.members.cache;
	const oembed = message.embeds[0];
	const paginationEnabled = items.length >= pageMax

	/**@type {import('discord.js').MessageEditOptions}*/
	const listUpdate = {
		embeds: [
			new EmbedBuilder()
				.setColor(oembed.color)
				.setAuthor({ name: oembed.author.name, iconURL: oembed.author.url })
				.setTitle(oembed.title)
				.addFields({
					name: `ü•î)‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨{ ${page + 1} / ${lastPage + 1} }‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨(ü•î`,
					value: 
						items.length
							? items.splice(page * pageMax, pageMax)
								.map(([tid,tuber]) => `${tuber.script ? '`üìú`' : ''}**${tid}** ‚Ä¢ ${(members.get(tuber.author) ?? guild.members.me).user.username}`)
								.join('\n')
							: `Ning√∫n Tub√©rculo coincide con la b√∫squeda actual`,
					inline: true,
				})
				.setFooter({ iconURL: guild.iconURL({ size: 256 }), text: `Total ‚Ä¢ ${items.length}` }),
		],
		components: [
			...paginationRows(page, lastPage, paginationEnabled),
			...helpRows(),
		],
	};

	if(setFilter !== undefined) {
		if(setFilter)
			listUpdate.content = setFilter;
		else
			listUpdate.content = null;
	}

	if(interaction.isModalSubmit())
		return interaction.message.edit(listUpdate);
	else
		return interaction.update(listUpdate);
};

/**
 * 
 * @param {import('../Commons/typings.js').ComplexCommandRequest|ButtonInteraction<'cached'>} interaction 
 * @param {*} item 
 * @param {*} tuberId 
 * @returns 
 */
function viewTuber(interaction, item, tuberId) {
	if(!item) {
		//@ts-expect-error
		return interaction.reply({ content: `‚ö†Ô∏èÔ∏è El Tub√©rculo **${tuberId}** no existe` });
	}

	const author = interaction.guild.members.cache.get(item.author) ?? interaction.guild.members.me;

	let buttons = [
		new ButtonBuilder()
			.setCustomId(`t_getDesc_${tuberId}_${compressId(item.author)}`)
			.setLabel('Describir Tub√©rculo')
			.setEmoji('‚Ñπ')
			.setStyle(ButtonStyle.Primary),
	];
	/**@type {Array<AttachmentBuilder>}*/
	let files = [];
	const embed = new EmbedBuilder()
		.setColor(Colors.DarkVividPink)
		.setAuthor({ name: interaction.guild.name, iconURL: interaction.guild.iconURL({ size: 256 }) })
		.setTitle('Visor de Tub√©rculos')
		.addFields(
			{
				name: 'TuberID',
				value: tuberId,
				inline: true,
			},
			{
				name: 'Autor',
				value: author.user.username,
				inline: true,
			},
		);
	
	if(item.desc)
		embed.addFields({
			name: 'Descripci√≥n',
			value: item.desc ?? '*Este Tub√©rculo no tiene descripci√≥n*',
		});
	
	if(item.script) {
		if(item.inputs?.length){
			embed.addFields({
				name: 'Entradas',
				value: item.inputs.map(i => `**(${RuntimeToLanguageType.get(i.type) ?? 'Nada'})** \`${i.name ?? 'desconocido'}\`: ${i.desc ?? 'Sin descripci√≥n'}`).join('\n'),
			});
			buttons.push(
				new ButtonBuilder()
					.setCustomId(`t_gID_${tuberId}_${compressId(item.author)}`)
					.setLabel('Describir entrada')
					.setEmoji('üè∑')
					.setStyle(ButtonStyle.Success),
			);
		}

		const visualPS = item.script.map
			? item.script.map(expr => expr.join(' ')).join(';\n')
			: item.script;
		if(visualPS.length >= 1020)
			files = [new AttachmentBuilder(Buffer.from(visualPS, 'utf-8'), { name: 'Pur√©Script.txt' })];
		else
			embed.addFields({
				name: 'Pur√©Script',
				value: [
					'```arm',
					`${visualPS}`,
					'```',
				].join('\n'),
			});
	} else {
		if(item.content) embed.addFields({ name: 'Mensaje', value: item.content });
		if(item.files && item.files.length) embed.addFields({
			name: 'Archivos',
			value: item.files.map((f,i) => `[${i}](${f})`).join(', '),
		});
	}

	const embeds = [embed];
	const components = [ makeButtonRowBuilder().addComponents(...buttons) ];

	//@ts-expect-error
	return interaction.reply({ embeds, files, components });
}

const options = new CommandOptions()
	.addParam('id', 	  'TEXT',           'para especificar sobre qu√© Tub√©rculo operar',          { optional: true })
	.addParam('mensaje',  'TEXT',           'para especificar el texto del mensaje',                { optional: true })
	.addParam('archivos', ['FILE','IMAGE'], 'para especificar los archivos del mensaje',            { optional: true, poly: 'MULTIPLE', polymax: 8 })
	.addParam('entradas', 'TEXT',           'para especificar las entradas del Tub√©rculo avanzado', { optional: true, poly: 'MULTIPLE', polymax: 8 })
	.addFlag(['c','m'], ['crear','agregar','a√±adir'], 'para crear o editar un Tub√©rculo')
	.addFlag('v', 		'ver', 		  				  'para ver detalles de un Tub√©rculo')
	.addFlag(['b','d'], ['borrar','eliminar'], 		  'para eliminar un Tub√©rculo')
	.addFlag('s', 		['script','pur√©','pure'], 	  'para usar Pur√©Script (junto a `-c`); reemplaza la funci√≥n de `<mensaje>`');
const flags = new CommandTags().add('COMMON');
const command = new CommandManager('tub√©rculo', flags)
	.setAliases('tuberculo', 'tubercle', 'tuber', 't')
	.setBriefDescription('Permite crear, editar, listar, borrar o ejecutar comandos personalizados de servidor')
	.setLongDescription(
		'Permite *listar*, `--crear`/editar, `--borrar` o __ejecutar__ Tub√©rculos (comandos personalizados de servidor).',
		'Usar el comando sin m√°s listar√° todos los Tub√©rculos de los que dispone el servidor actual',
		'En caso de estar creando un Tub√©rculo, se requerir√° un `<mensaje>` y/o `<archivos>`, junto a la `<id>` que quieras darle al mismo. Si la ID ya est√° registrada, ser√° *editada*',
		'En cualquier parte del contenido del mensaje, coloca "#FIN#" para bajar un rengl√≥n (no es necesario con Pur√©Script)',
		'En caso de estar editando o borrando un Tub√©rculo existente, se requerir√° su TuberID',
		'Puedes leer o descargar la documentaci√≥n de Pur√©Script desde [aqu√≠](https://drive.google.com/drive/folders/1wv2-n4J5SSZNH9oQ5gNEPpptm7rNFEnV?usp=share_link) (~3MiB)',
		'N√≥tese que el lenguaje se encuentra en una etapa prematura y puede tener bugs o cambiar considerablemente',
	)
	.setOptions(options)
	.setExecution(async (request, args, isSlash = false, rawArgs) => {
		const helpString = `Usa \`${p_pure(request.guildId).raw}ayuda tub√©rculo\` para m√°s informaci√≥n`;
		const operation = options.fetchFlag(args, 'crear', { callback: 'crear' })
			|| options.fetchFlag(args, 'ver', { callback: 'ver' })
			|| options.fetchFlag(args, 'borrar', { callback: 'borrar' });
		const isPureScript = options.fetchFlag(args, 'script');

		const tuberId = CommandOptionSolver.asString(await options.fetchParam(args, 'id'));
		const members = request.guild.members.cache;

		if(!tuberId) {
			if(operation)
				return request.reply({ content: `‚ö†Ô∏èÔ∏è Debes ingresar una TuberID v√°lida\n${helpString}` });
				
			//Listar Tub√©rculos
			const { items, lastPage } = await getItemsList(request.guild);
			return request.reply({
				embeds: [
					new EmbedBuilder()
						.setColor(Colors.LuminousVividPink)
						.setAuthor({ name: request.guild.name, iconURL: request.guild.iconURL({ size: 256 }) })
						.setTitle('Arsenal de Tub√©rculos del Servidor')
						.addFields({
							name: `ü•î)‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨{ ${items.length ? `1 / ${lastPage + 1}` : '- - -'} }‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨(ü•î`, 
							value: items.length
								? items.splice(0, pageMax)
									.map(([tid,tuber]) => `${tuber.script ? '`üìú`' : ''}**${tid}** ‚Ä¢ ${(members.get(tuber.author) ?? request.guild.members.me).user.username}`)
									.join('\n')
								: `Este servidor no tiene ning√∫n Tub√©rculo.\nComienza a desplegar TuberIDs con \`${p_pure(request.guildId).raw}tub√©rculo --crear\``,
							inline: true,
						})
						.setFooter({ iconURL: request.guild.iconURL({ size: 256 }), text: `Total ‚Ä¢ ${items.length}` }),
				],
				components: [
					...((items.length < pageMax) ? [] : paginationRows(0, lastPage)),
					...helpRows(),
				],
			});
		}

		//Realizar operaci√≥n sobre ID de Tub√©rculo
		const gid = request.guild.id;
		const guildquery = { guildId: gid };
		const gcfg = (await GuildConfig.findOne(guildquery)) || new GuildConfig(guildquery);
		gcfg.tubers ||= {};
		switch(operation) {
			case 'crear':
				if(tuberId.length > 24)
					return request.reply({ content: '‚ö†Ô∏èÔ∏è Las TuberID solo pueden medir hasta 24 caracteres' });
				if(gcfg.tubers[tuberId] && isNotModerator(request.member) && gcfg.tubers[tuberId].author !== request.user.id)
					return request.reply({ content: `‚õî Acci√≥n denegada. Esta TuberID **${tuberId}** le pertenece a *${(request.guild.members.cache.get(gcfg.tubers[tuberId].author) ?? request.guild.members.me).user.username}*` });
				
				const tuberContent = { author: request.userId };
				const codeTag = isSlash ? 0 : rawArgs.match(/```[A-Za-z0-9]*/)?.[0];
				/**@type {String}*/
				let mcontent;
				if(isSlash) {
					mcontent = /**@type {CommandInteractionOptionResolver}*/(args).getString('mensaje');
				} else {
					if(isPureScript) {
						if(!codeTag)
							return request.reply({
								content: [
									'Debes poner **\\`\\`\\`** antes y despu√©s del c√≥digo.',
									'Esto har√° que Discord le ponga el formato adecuado al c√≥digo y que sea m√°s f√°cil programar.',
									'Opcionalmente, puedes poner **\\`\\`\\`arm** en el del principio para colorear el c√≥digo'
								].join('\n'),
							});
						const firstIndex = rawArgs.indexOf(codeTag);
						const lastIndex = rawArgs.lastIndexOf('```');
						mcontent = rawArgs.slice(firstIndex + codeTag.length, lastIndex > firstIndex ? lastIndex : rawArgs.length).trim();
					} else {
						mcontent = /**@type {Array<String>}*/(args).join(' ').split(/[\n ]*##[\n ]*/).join('\n');
					}
				}
				const mfiles = isSlash
					? options.fetchParamPoly(/**@type {CommandInteractionOptionResolver}*/(args), 'archivos', /**@type {CommandInteractionOptionResolver}*/(args).getString, null).filter(att => att)
					: request.attachments.map(att => att.proxyURL);

				//Incluir Tub√©rculo; crear colecci√≥n de Tub√©rculos si es necesario
				if(isPureScript) {
					if(!mcontent)
						return request.reply({ content: `‚ö†Ô∏èÔ∏è Este Tub√©rculo requiere ingresar Pur√©Script\n${helpString}` });
					tuberContent.script = mcontent.replace(/```[A-Za-z0-9]*/, '');
					console.log({ script: tuberContent.script });
				} else {
					if(!mcontent && !mfiles.length)
						return request.reply({ content: `‚ö†Ô∏èÔ∏è Debes ingresar un mensaje o archivo para registrar un Tub√©rculo\n${helpString}` });
					if(mcontent) tuberContent.content = mcontent;
					if(mfiles.length) tuberContent.files = mfiles;
				}

				gcfg.tubers[tuberId] = tuberContent;
				
				try {
					console.log('Ejecutando Pur√©Script:', gcfg.tubers[tuberId]);
					gcfg.tubers[tuberId].tuberId = tuberId;
					await request.deferReply();
					await executeTuber(request, gcfg.tubers[tuberId], { isTestDrive: false });
					console.log('Pur√©Script ejecutado:', gcfg.tubers[tuberId]);
					if(gcfg.tubers[tuberId].script)
						gcfg.tubers[tuberId].script = gcfg.tubers[tuberId].script;
					gcfg.markModified('tubers');
				} catch(error) {
					console.log('Ocurri√≥ un error al a√±adir un nuevo Tub√©rculo');
					console.error(error);
					const errorContent = { content: '‚ùå Hay un problema con el Tub√©rculo que intentaste crear, por lo que no se registrar√°' };
					return request.editReply(errorContent);
				}
				break;

			case 'ver':
				return viewTuber(request, gcfg.tubers[tuberId], tuberId);
			
			case 'borrar':
				if(!gcfg.tubers[tuberId])
					return request.reply({ content: `‚ö†Ô∏èÔ∏è El Tub√©rculo **${tuberId}** no existe` });
				if(isNotModerator(request.member) && gcfg.tubers[tuberId].author !== request.userId)
					return request.reply({ content: `‚õî Acci√≥n denegada. Esta TuberID **${tuberId}** le pertenece a *${(request.guild.members.cache.get(gcfg.tubers[tuberId].author) ?? request.guild.members.me).user.username}*` });

				gcfg.tubers[tuberId] = null;
				delete gcfg.tubers[tuberId];
				gcfg.markModified('tubers');
				request.reply({ content: '‚úÖ Tub√©rculo eliminado con √©xito' });
				break;
			
			default:
				let tid = tuberId;
				if(!gcfg.tubers[tuberId]) {
					const notFoundEmbed = new EmbedBuilder()
						.setColor(Colors.Orange)
						.setTitle(`‚ö†Ô∏èÔ∏è El Tub√©rculo **${shortenText(tuberId, 64)}** no existe`)
						.setImage('https://i.imgur.com/LFzqoJX.jpg');

					const row = makeButtonRowBuilder().addComponents(
						new ButtonBuilder()
							.setCustomId(`tub√©rculo_getHelp_${request.userId}`)
							.setLabel('Necesito ayuda')
							.setEmoji('üí°')
							.setStyle(ButtonStyle.Primary),
					);

					/**@type {Array<{ name: String, distance: Number }>}*/
					let similar = [];
					let superSimilar;
					if(tuberId.length > 1)
						similar = Object.keys(gcfg.tubers)
							.filter(name => name.length > 1)
							.map(name => ({ name, distance: edlDistance(tuberId, name) }))
							.filter(t => t.distance <= 3.5)
							.sort((a, b) => a.distance - b.distance)
							.slice(0, 5);
					
					if(similar[0]?.distance <= 0 && (similar[1] == undefined || similar[1].distance > 0)) {
						superSimilar = similar[0];
						tid = superSimilar.name;
					}

					if(!superSimilar) {
						if(similar.length) {
							notFoundEmbed.addFields({
								name: `TuberIDs similares a "${shortenText(tuberId, 80)}"`,
								value: similar.map(t => `‚Ä¢ **${shortenText(t.name, 152)}** (${t.distance > 0 ? `~${Math.round(100 - t.distance / 3.5 * 100)}` : '>99'}%)`).join('\n'),
							});
						} else
							notFoundEmbed.addFields({
								name: 'Creaci√≥n de Tub√©rculos',
								value: [
									`No se encontraron Tub√©rculos similares a "${shortenText(tuberId, 80)}".`,
									'¬øQuieres crear un Tub√©rculo simple? ¬°Usa la bandera `--crear` y maqueta la respuesta que desees!',
								].join('\n'),
							});
						
						if(isPureScript)
							notFoundEmbed.addFields({
								name: 'Crear Tub√©rculo avanzado',
								value: '¬øEst√°s intentando crear un Tub√©rculo con Pur√©Script? Usa la bandera `--crear` junto a `--script` (o `-cs` para la versi√≥n corta)',
							});
						
						return request.reply({
							embeds: [notFoundEmbed],
							components: [row],
						});
					}
				}
				console.log(args);
				const tuberArgs = Array.isArray(args)
					? args
					: options.fetchParamPoly(args, 'entradas', args.getString, null).filter(input => input);
				console.log('tuberArgs:', tuberArgs);
				await request.deferReply();
				await executeTuber(request, { ...gcfg.tubers[tid], tuberId: tid }, { args: tuberArgs, isTestDrive: false })
				.catch(error => {
					console.log('Ocurri√≥ un error al ejecutar un Tub√©rculo');
					console.error(error);
					if(!gcfg.tubers[tid].script && error.name !== 'TuberInitializerError')
						request.editReply({ content: '‚ùå Parece que hay un problema con este Tub√©rculo. Si eres el creador, puedes modificarlo o eliminarlo. Si no, av√≠sale al creador' });
				});
				break;
		}
		return gcfg.save(); //Guardar en Configuraciones de Servidor si se cambi√≥ algo
	})
	.setButtonResponse(function getHelp(interaction, userId) {
		if(interaction.user.id !== userId)
			return interaction.reply({ content: 'No tienes permiso para hacer eso', ephemeral: true });
		
		//@ts-expect-error
		return require('./ayuda.js').execute(interaction, [ 'tub√©rculo' ], false);
	})
	.setButtonResponse(async function getTuberHelp(interaction, tuberId) {
		if(!tuberId)
			return interaction.reply({ content: '‚ö†Ô∏è Se esperaba una TuberID v√°lida', ephemeral: true });

		const gid = interaction.guild.id;
		const guildquery = { guildId: gid };
		const gcfg = (await GuildConfig.findOne(guildquery)) || new GuildConfig(guildquery);
		const tuber = gcfg.tubers[tuberId];
		if(!tuber)
			return interaction.reply({ content: '‚ö†Ô∏è Esta TuberID ya no existe', ephemeral: true });
		
		return viewTuber(interaction, tuber, tuberId);
	})
	.setButtonResponse(async function loadPage(interaction, page) {
		return loadPageNumber(interaction, parseInt(page));
	})
	.setButtonResponse(async function filterItems(interaction, target) {
		const filter = filters[target];

		const filterInput = new TextInputBuilder()
			.setCustomId('filterInput')
			.setLabel(filter.label)
			.setPlaceholder(filter.placeholder)
			.setStyle(TextInputStyle.Short)
			.setMaxLength(48)
			.setRequired(true);
		const row = makeTextInputRowBuilder().addComponents(filterInput);
		const modal = new ModalBuilder()
			.setCustomId(`tub√©rculo_filterSubmit_${target}`)
			.setTitle('Filtro de b√∫squeda')
			.addComponents(row);

		return interaction.showModal(modal);
	})
	.setModalResponse(async function filterSubmit(interaction, target) {
		const { guild, client } = interaction;
		
		let filter = interaction.fields.getTextInputValue('filterInput');
		if(target === 'AUTHOR') {
			if(filter.startsWith('@'))
				filter = filter.slice(1);
			const userId = fetchUserID(filter, { guild, client });
			if(!userId)
				return interaction.reply({
					content: '‚ö†Ô∏è Usuario no encontrado',
					ephemeral: true
				});
			filter = userId;
		} else
			filter = filter.toLowerCase();
		const content = `${filters[target].label}: ${filter}`;
		return loadPageNumber(interaction, 0, content);
	})
	.setButtonResponse(async function filterClear(interaction) {
		if(!interaction.message.content)
			return interaction.reply({
				content: '‚ö†Ô∏è Esta lista ya muestra todos los resultados',
				ephemeral: true,
			});
			
		return loadPageNumber(interaction, 0, '');
	})
	.setButtonResponse(function getDesc(interaction, tuberId, userId) {
		userId = decompressId(userId);

		if(isNotModerator(interaction.member) && userId !== interaction.user.id) {
			const members = interaction.guild.members;
			return interaction.reply({
				content: `‚õî Acci√≥n denegada. La TuberID **${tuberId}** le pertenece a *${(members.cache.get(userId) ?? members.me).user.username}*`,
				ephemeral: true,
			});
		}

		const descInput = new TextInputBuilder()
			.setCustomId('descInput')
			.setLabel('Descripci√≥n')
			.setStyle(TextInputStyle.Paragraph)
			.setMaxLength(512);
		const row = makeTextInputRowBuilder().addComponents(descInput);
		const modal = new ModalBuilder()
			.setCustomId(`t_setDesc_${tuberId}`)
			.setTitle('Describir Tub√©rculo')
			.setComponents(row);

		return interaction.showModal(modal);
	})
	.setButtonResponse(async function gID(interaction, tuberId, userId) {
		userId = decompressId(userId);
		
		if(isNotModerator(interaction.member) && userId !== interaction.user.id) {
			const gcfg = await GuildConfig.findOne({ guildId: interaction.guildId });
			return interaction.reply({
				content: `‚õî Acci√≥n denegada. La TuberID **${tuberId}** le pertenece a *${(interaction.guild.members.cache.get(gcfg.tubers[tuberId].author) ?? interaction.guild.members.me).user.username}*`,
				ephemeral: true,
			});
		}

		const nameInput = new TextInputBuilder()
			.setCustomId('nameInput')
			.setLabel('Entrada')
			.setStyle(TextInputStyle.Short)
			.setRequired(true)
			.setPlaceholder('Nombre de la entrada');
		const descInput = new TextInputBuilder()
			.setCustomId('descInput')
			.setLabel('Descripci√≥n')
			.setStyle(TextInputStyle.Paragraph)
			.setMaxLength(512);
		const nameRow = makeTextInputRowBuilder().addComponents(nameInput);
		const descRow = makeTextInputRowBuilder().addComponents(descInput);
		const modal = new ModalBuilder()
			.setCustomId(`t_setIDesc_${tuberId}`)
			.setTitle('Describir Entrada')
			.setComponents(nameRow, descRow);

		return interaction.showModal(modal);
	})
	.setSelectMenuResponse(async function loadPageExact(interaction) {
		return loadPageNumber(interaction, parseInt(interaction.values[0]));
	})
	.setModalResponse(async function setDesc(interaction, tuberId) {
		if(!tuberId)
			return interaction.reply({ content: '‚ö†Ô∏è Se esperaba una TuberID v√°lida', ephemeral: true });
		
		await interaction.deferReply({ ephemeral: true });

		const gcfg = await GuildConfig.findOne({ guildId: interaction.guild.id });
		if(!gcfg)
			return interaction.editReply({ content: '‚ö†Ô∏è Este servidor no est√° registrado en la base de datos' });

		if(!gcfg.tubers[tuberId])
			return interaction.editReply({ content: '‚ö†Ô∏è Esta TuberID ya no existe' });

		const desc = interaction.fields.getTextInputValue('descInput');
		gcfg.tubers[tuberId].desc = desc;
		gcfg.markModified(`tubers.${tuberId}`);
		await gcfg.save();

		return interaction.editReply({ content: '‚úÖ Descripci√≥n actualizada' });
	})
	.setModalResponse(async function setIDesc(interaction, tuberId) {
		if(!tuberId)
			return interaction.reply({ content: '‚ö†Ô∏è Se esperaba una TuberID v√°lida', ephemeral: true });
		
		await interaction.deferReply({ ephemeral: true });

		const gcfg = await GuildConfig.findOne({ guildId: interaction.guild.id });
		if(!gcfg)
			return interaction.editReply({ content: '‚ö†Ô∏è Este servidor no est√° registrado en la base de datos' });

		if(!Array.isArray(gcfg.tubers[tuberId]?.inputs))
			return interaction.editReply({ content: '‚ö†Ô∏è Esta TuberID ya no existe, o no contiene entradas v√°lidas' });
		
		const name = interaction.fields.getTextInputValue('nameInput');
		const inputIndex = gcfg.tubers[tuberId].inputs.findIndex(input => (input.identifier ?? input.name) === name);
		if(inputIndex < 0)
			return interaction.editReply({ content: `‚ö†Ô∏è La entrada "${shortenText(name, 128)}" no existe para el Tub√©rculo **${shortenText(tuberId, 256)}**` });

		const desc = interaction.fields.getTextInputValue('descInput');
		gcfg.tubers[tuberId].inputs[inputIndex].desc = desc;
		console.log(tuberId, name, inputIndex, ':', desc);
		gcfg.markModified(`tubers.${tuberId}`);
		await gcfg.save();

		return interaction.editReply({ content: `‚úÖ Descripci√≥n de entrada "${shortenText(name, 256)}" actualizada` });
	});

module.exports = command;