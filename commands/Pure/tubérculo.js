const GuildConfig = require('../../localdata/models/guildconfigs.js');
const { CommandOptionsManager, CommandMetaFlagsManager, CommandManager } = require('../Commons/commands');
const { p_pure } = require('../../localdata/customization/prefixes.js');
const { isNotModerator, fetchUserID, navigationRows, edlDistance, shortenText } = require('../../func.js');
const { MessageEmbed, MessageActionRow, MessageButton, MessageAttachment, Modal, TextInputComponent } = require('discord.js');
const { ProgramToLanguage } = require('../../systems/ps/commons.js');
const { executeTuber } = require('../../systems/purescript.js');

const pageMax = 10;
const filters = {
	AUTHOR: {
		label: 'Autor',
		placeholder: 'Ej: @Bot de Pur√©#9243 / 651250669390528561',
	},
	TID: {
		label: 'TuberID',
		placeholder: 'Identificador de Tub√©rculo existente',
	},
};

/**
 * Retorna un arreglo de MessageActionRows en respecto a la p√°gina actual y si la navegaci√≥n por p√°gina est√° permitida
 * @param {Number} page 
 * @param {Number} backward 
 * @param {Number} forward 
 * @param {Number} lastPage 
 * @param {Boolean} navigationEnabled 
 * @returns {Array<MessageActionRow>}
 */
const paginationRows = (page, lastPage, navigationEnabled = true) => {
	const rows = [];

	if(navigationEnabled)
		rows.push(...navigationRows('tub√©rculo', page, lastPage));

	rows.push(
		new MessageActionRow().addComponents(
			new MessageButton()
				.setCustomId('tub√©rculo_filterItems_AUTHOR')
				.setLabel('Filtrar Autor')
				.setEmoji('936530498061213756')
				.setStyle('SUCCESS'),
			new MessageButton()
				.setCustomId('tub√©rculo_filterItems_TID')
				.setLabel('Filtrar TuberID')
				.setEmoji('936530498061213756')
				.setStyle('SUCCESS'),
			new MessageButton()
				.setCustomId('tub√©rculo_filterClear')
				.setLabel('Mostrar todo')
				.setEmoji('936531643496288288')
				.setStyle('DANGER'),
		),
	);
	return rows;
};

/**
 * @param {import('discord.js').Guild} guild 
 * @param {String?} content 
 */
const getItemsList = async(guild, content) => {
	const gcfg = await GuildConfig.findOne({ guildId: guild.id });
	/**@type {Array<[String, String]>}*/
	let items = Object.entries(gcfg.tubers).reverse();
	if(content) {
		const filter = content.split(': ');
		const [ target, value ] = filter;
		if(target === 'Autor')
			items = items.filter(([_,tuber]) => tuber.author === value);
		else
			items = items.filter(([tid,_]) => tid.toLowerCase().indexOf(value) !== -1);
	}

	const lastPage = Math.ceil(items.length / pageMax) - 1;
	
	return { items, lastPage };
};

/**
 * @param {import('discord.js').ButtonInteraction | import('discord.js').SelectMenuInteraction} interaction 
 * @param {Number} page 
 */
const loadPageNumber = async(interaction, page, setFilter = undefined) => {
	page = parseInt(page);
	const { guild, message } = interaction;
	const { items, lastPage } = await getItemsList(guild, setFilter ?? message.content, page);
	const members = guild.members.cache;
	const oembed = message.embeds[0];
	const paginationEnabled = items.length >= pageMax

	const listUpdate = {
		embeds: [
			new MessageEmbed()
				.setColor(oembed.color)
				.setAuthor({ name: oembed.author.name, iconURL: oembed.author.url })
				.setTitle(oembed.title)
				.addFields({
					name: `ü•î)‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨{ ${page + 1} / ${lastPage + 1} }‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨(ü•î`,
					value: 
						items.length
							? items.splice(page * pageMax, pageMax)
								.map(([tid,tuber]) => `${tuber.script ? '`üìú`' : ''}**${tid}** ‚Ä¢ ${(members.get(tuber.author) ?? guild.me).user.username}`)
								.join('\n')
							: `Ning√∫n Tub√©rculo coincide con la b√∫squeda actual`,
					inline: true,
				})
				.setFooter({ iconUrl: guild.iconURL({ dynamic: true, size: 256 }), text: `Total ‚Ä¢ ${items.length}` }),
		],
		components: paginationRows(page, lastPage, paginationEnabled),
	};

	if(setFilter !== undefined) {
		if(setFilter)
			listUpdate.content = setFilter;
		else
			listUpdate.content = null;
	}

	return interaction.update(listUpdate);
};

const options = new CommandOptionsManager()
	.addParam('id', 	  'TEXT',           'para especificar sobre qu√© Tub√©rculo operar', { optional: true })
	.addParam('mensaje',  'TEXT',           'para especificar el texto del mensaje',       { optional: true })
	.addParam('archivos', ['FILE','IMAGE'], 'para especificar los archivos del mensaje',   { optional: true, poly: 'MULTIPLE' })
	.addFlag(['c','m'], ['crear','agregar','a√±adir'], 'para crear o editar un Tub√©rculo')
	.addFlag('v', 		'ver', 		  				  'para ver detalles de un Tub√©rculo')
	.addFlag(['b','d'], ['borrar','eliminar'], 		  'para eliminar un Tub√©rculo')
	.addFlag('s', 		['script','pur√©','pure'], 	  'para usar Pur√©Script (junto a `-c`); reemplaza la funci√≥n de `<mensaje>`');
const flags = new CommandMetaFlagsManager().add('COMMON');
const command = new CommandManager('tub√©rculo', flags)
	.setAliases('tuberculo', 'tubercle', 'tuber', 't')
	.setBriefDescription('Permite crear, editar, listar, borrar o ejecutar comandos personalizados de servidor')
	.setLongDescription(
		'Permite *listar*, `--crear`/editar, `--borrar` o __ejecutar__ Tub√©rculos (comandos personalizados de servidor).',
		'Usar el comando sin m√°s listar√° todos los Tub√©rculos de los que dispone el servidor actual',
		'En caso de estar creando un Tub√©rculo, se requerir√° un `<mensaje>` y/o `<archivos>`, junto a la `<id>` que quieras darle al mismo. Si la ID ya est√° registrada, ser√° *editada*',
		'En cualquier parte del contenido del mensaje, coloca "#FIN#" para bajar un rengl√≥n (no es necesario con Pur√©Script)',
		'En caso de estar editando o borrando un Tub√©rculo existente, se requerir√° su TuberID',
		'Puedes leer o descargar la documentaci√≥n de la versi√≥n 1.0 de Pur√©Script desde [aqu√≠](https://drive.google.com/file/d/1KebeyvsjJUqpInvCiy8wlOJ-M_ewrTch/view?usp=share_link) (3MB)',
		'N√≥tese que el lenguaje se encuentra en una etapa prematura y puede tener bugs o cambiar considerablemente',
	)
	.setOptions(options)
	.setExecution(async (request, args, isSlash = false, rawArgs) => {
		const helpString = `Usa \`${p_pure(request.guildId).raw}ayuda tub√©rculo\` para m√°s informaci√≥n`;
		const operation = options.fetchFlag(args, 'crear', { callback: 'crear' })
			|| options.fetchFlag(args, 'ver', { callback: 'ver' })
			|| options.fetchFlag(args, 'borrar', { callback: 'borrar' });
		const isPureScript = options.fetchFlag(args, 'script');

		/**@type {String?}*/
		const tuberId = isSlash ? args.getString('id') : args.shift();
		const members = request.guild.members.cache;

		if(!tuberId) {
			if(operation)
				return request.reply({ content: `‚ö†Ô∏è Debes ingresar una TuberID v√°lida\n${helpString}` });
				
			//Listar Tub√©rculos
			const { items, lastPage } = await getItemsList(request.guild);
			return request.reply({
				embeds: [
					new MessageEmbed()
						.setColor('LUMINOUS_VIVID_PINK')
						.setAuthor({ name: request.guild.name, iconURL: request.guild.iconURL() })
						.setTitle('Arsenal de Tub√©rculos del Servidor')
						.addFields({
							name: `ü•î)‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨{ ${items.length ? `1 / ${lastPage + 1}` : '- - -'} }‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨(ü•î`, 
							value: items.length
								? items.splice(0, pageMax)
									.map(([tid,tuber]) => `${tuber.script ? '`üìú`' : ''}**${tid}** ‚Ä¢ ${(members.get(tuber.author) ?? request.guild.me).user.username}`)
									.join('\n')
								: `Este servidor no tiene ning√∫n Tub√©rculo.\nComienza a desplegar TuberIDs con \`${p_pure(request.guildId).raw}tub√©rculo --crear\``,
							inline: true,
						})
						.setFooter({ iconUrl: request.guild.iconURL({ dynamic: true, size: 256 }), text: `Total ‚Ä¢ ${items.length}` }),
				],
				components: (items.length < pageMax) ? null : paginationRows(0, lastPage),
			});
		}

		//Realizar operaci√≥n sobre ID de Tub√©rculo
		const gid = request.guild.id;
		const guildquery = { guildId: gid };
		const gcfg = (await GuildConfig.findOne(guildquery)) || new GuildConfig(guildquery);
		gcfg.tubers ||= {};
		switch(operation) {
			case 'crear':
				if(tuberId.length > 24)
					return request.reply({ content: '‚ö†Ô∏è Las TuberID solo pueden medir hasta 24 caracteres' });
				if(gcfg.tubers[tuberId] && isNotModerator(request.member) && gcfg.tubers[tuberId].author !== (request.author ?? request.user).id)
					return request.reply({ content: `‚õî Acci√≥n denegada. Esta TuberID **${tuberId}** le pertenece a *${(request.guild.members.cache.get(gcfg.tubers[tuberId].author) ?? request.guild.me).user.username}*` });
				
				const tuberContent = { author: (request.user ?? request.author).id };
				const codeTag = rawArgs.match(/```[A-Za-z0-9]*/)?.[0];
				/**@type {String}*/
				let mcontent;
				if(isSlash)
					mcontent = args.getString('mensaje');
				else {
					if(!codeTag)
						return request.reply({
							content: [
								'Debes poner **\\`\\`\\`** antes y despu√©s del c√≥digo.',
								'Esto har√° que Discord le ponga el formato adecuado al c√≥digo y que sea m√°s f√°cil programar.',
								'Opcionalmente, puedes poner **\\`\\`\\`arm** en el del principio para colorear el c√≥digo'
							].join('\n'),
						});
					const firstIndex = rawArgs.indexOf(codeTag);
					const lastIndex = rawArgs.lastIndexOf('```');
					mcontent = rawArgs.slice(firstIndex + codeTag.length, lastIndex > firstIndex ? lastIndex : rawArgs.length).trim();
				}
				const mfiles = isSlash ? options.fetchParamPoly(args, 'archivos', args.getString, null).filter(att => att) : (request.attachments || []).map(att => att.proxyURL);

				//Incluir Tub√©rculo; crear colecci√≥n de Tub√©rculos si es necesario
				if(isPureScript) {
					if(!mcontent)
						return request.reply({ content: `‚ö†Ô∏è Este Tub√©rculo requiere ingresar Pur√©Script\n${helpString}` });
					tuberContent.script = mcontent.replace('```arm', '');
					console.log({ script: tuberContent.script });
				} else {
					if(!mcontent && !mfiles.length)
						return request.reply({ content: `‚ö†Ô∏è Debes ingresar un mensaje o archivo para registrar un Tub√©rculo\n${helpString}` });
					if(mcontent) tuberContent.content = mcontent;
					if(mfiles.length) tuberContent.files = mfiles;
				}

				gcfg.tubers[tuberId] = tuberContent;
				
				try {
					console.log('Ejecutando Pur√©Script:', gcfg.tubers[tuberId]);
					const result = await executeTuber(request, gcfg.tubers[tuberId], { isSlash });
					console.log('Pur√©Script ejecutado:', gcfg.tubers[tuberId]);
					if(gcfg.tubers[tuberId].script) {
						gcfg.tubers[tuberId].script = gcfg.tubers[tuberId].script;
						
						console.log('Script guardado:', gcfg.tubers[tuberId].script);
					}
					gcfg.markModified('tubers');
				} catch(error) {
					console.log('Ocurri√≥ un error al a√±adir un nuevo Tub√©rculo');
					console.error(error);
					return request.reply({ content: '‚ùå Hay un problema con el Tub√©rculo que intentaste crear, por lo que no se registrar√°' });
				}
				break;

			case 'ver':
				const item = gcfg.tubers[tuberId];
				if(!item)
					return request.reply({ content: `‚ö†Ô∏è El Tub√©rculo **${tuberId}** no existe` });

				let files = [];
				const embed = new MessageEmbed()
					.setColor('DARK_VIVID_PINK')
					.setAuthor({ name: request.guild.name, iconURL: request.guild.iconURL() })
					.setTitle('Visor de Tub√©rculos')
					.addFields(
						{
							name: 'TuberID',
							value: tuberId,
							inline: true,
						},
						{
							name: 'Autor',
							value: (request.guild.members.cache.get(item.author) ?? request.guild.me).user.username,
							inline: true,
						},
					);
				
				if(item.desc)
					embed.addFields({
						name: 'Descripci√≥n',
						value: item.desc ?? '*Este Tub√©rculo no tiene descripci√≥n*',
					});
				
				if(item.script) {
					if(item.inputs?.length)
						embed.addFields({
							name: 'Entradas',
							value: item.inputs.map(i => `**(${ProgramToLanguage.get(i.type)})** \`${i.name}\`: ${i.description ?? 'Sin descripci√≥n'}`).join('\n'),
						});
					const visualPS = item.script.map
						? item.script.map(expr => expr.join(' ')).join(';\n')
						: item.script;
					if(visualPS.length >= 1020)
						files = [new MessageAttachment(Buffer.from(visualPS, 'utf-8'), 'Pur√©Script.txt')];
					else
						embed.addFields({
							name: 'Pur√©Script',
							value: [
								'```arm',
								`${visualPS}`,
								'```',
							].join('\n'),
						});
				} else {
					if(item.content) embed.addFields({ name: 'Mensaje', value: item.content });
					if(item.files && item.files.length) embed.addFields({
						name: 'Archivos',
						value: item.files.map((f,i) => `[${i}](${f})`).join(', '),
					});
				}

				return request.reply({
					embeds: [embed],
					files,
					//components: *algo*,
				});
			
			case 'borrar':
				if(!gcfg.tubers[tuberId])
					return request.reply({ content: `‚ö†Ô∏è El Tub√©rculo **${tuberId}** no existe` });
				if(isNotModerator(request.member) && gcfg.tubers[tuberId].author !== (request.author ?? request.user).id)
					return request.reply({ content: `‚õî Acci√≥n denegada. Esta TuberID **${tuberId}** le pertenece a *${(request.guild.members.cache.get(gcfg.tubers[tuberId].author) ?? request.guild.me).user.username}*` });

				gcfg.tubers[tuberId] = null;
				delete gcfg.tubers[tuberId];
				gcfg.markModified('tubers');
				request.reply({ content: '‚úÖ Tub√©rculo eliminado con √©xito' });
				break;
			
			default:
				if(!gcfg.tubers[tuberId]) {
					const notFoundEmbed = new MessageEmbed()
						.setColor('ORANGE')
						.setTitle(`‚ö†Ô∏è El Tub√©rculo **${tuberId}** no existe`)
						.setImage('https://i.imgur.com/LFzqoJX.jpg');

					const row = new MessageActionRow().addComponents(
						new MessageButton()
							.setCustomId(`tub√©rculo_getHelp_${(request.author ?? request.user).id}`)
							.setLabel('Necesito ayuda')
							.setEmoji('üí°')
							.setStyle('PRIMARY'),
					);

					let similar;
					if(tuberId.length > 1)
						similar = Object.keys(gcfg.tubers)
							.filter(name => name.length > 1)
							.map(name => ({ name, distance: edlDistance(tuberId, name) }))
							.filter(t => t.distance <= 3.5);

					if(similar.length) {
						similar = similar
							.sort((a, b) => a.distance - b.distance)
							.slice(0, 5);
						
						notFoundEmbed.addFields({
							name: `TuberIDs similares a "${shortenText(tuberId, 80)}"`,
							value: similar.map(t => `‚Ä¢ **${shortenText(t.name, 152)}** (~${Math.round(100 - t.distance / 3.5 * 100)}%)`).join('\n'),
						});
					} else
						notFoundEmbed.addFields({
							name: 'Creaci√≥n de Tub√©rculos',
							value: [
								`No se encontraron Tub√©rculos similares a "${shortenText(tuberId, 80)}".`,
								'¬øQuieres crear un Tub√©rculo simple? ¬°Usa la bandera `--crear` y maqueta la respuesta que desees!',
							].join('\n'),
						});
					
					if(isPureScript)
						notFoundEmbed.addFields({
							name: 'Crear Tub√©rculo avanzado',
							value: '¬øEst√°s intentando crear un Tub√©rculo con Pur√©Script? Usa la bandera `--crear` junto a `--script` (o `-cs` para la versi√≥n corta)',
						});
					
					return request.reply({
						embeds: [notFoundEmbed],
						components: [row],
					});
				}
				console.log(args);
				const tuberArgs = Array.isArray(args)
					? args
					: options.fetchParamPoly(args, 'entradas', args.getString, null).filter(input => input);
				console.log('tuberArgs:', tuberArgs);
				await executeTuber(request, gcfg.tubers[tuberId], { tuberArgs, isSlash })
				.catch(error => {
					console.log('Ocurri√≥ un error al ejecutar un Tub√©rculo');
					console.error(error);
					request.reply({ content: '‚ùå Parece que hay un problema con este Tub√©rculo. Prueba cre√°ndolo nuevamente o elimin√°ndolo si no se usa m√°s' });
				});
				break;
		}
		return gcfg.save(); //Guardar en Configuraciones de Servidor si se cambi√≥ algo
	})
	.setButtonResponse(function getHelp(interaction, userId) {
		if(interaction.user.id !== userId)
			return interaction.reply({ content: 'No tienes permiso para hacer eso', ephemeral: true });
		return require('./ayuda.js').execute(interaction, [ 'tub√©rculo' ], false);
	})
	.setButtonResponse(async function loadPage(interaction, page) {
		return loadPageNumber(interaction, page);
	})
	.setButtonResponse(async function filterItems(interaction, target) {
		const filter = filters[target];

		const filterInput = new TextInputComponent()
			.setCustomId('filterInput')
			.setLabel(filter.label)
			.setPlaceholder(filter.placeholder)
			.setStyle('SHORT')
			.setMaxLength(48)
			.setRequired(true);
		const row = new MessageActionRow().addComponents(filterInput);
		const modal = new Modal()
			.setCustomId(`tub√©rculo_filterSubmit_${target}`)
			.setTitle('Filtro de b√∫squeda')
			.addComponents(row);

		return interaction.showModal(modal);
	})
	.setModalResponse(async function filterSubmit(interaction, target) {
		const { guild, client } = interaction;
		
		let filter = interaction.fields.getTextInputValue('filterInput');
		if(target === 'AUTHOR') {
			if(filter.startsWith('@'))
				filter = filter.slice(1);
			const userId = fetchUserID(filter, { guild, client });
			if(!userId)
				return interaction.reply({
					content: '‚ö† Usuario no encontrado',
					ephemeral: true
				});
			filter = userId;
		}
		const content = `${filters[target].label}: ${filter}`;
		return loadPageNumber(interaction, 0, content);
	})
	.setButtonResponse(async function filterClear(interaction) {
		if(!interaction.message.content)
			return interaction.reply({
				content: '‚ö† Esta lista ya muestra todos los resultados',
				ephemeral: true,
			});
			
		return loadPageNumber(interaction, 0, '');
	})
	.setSelectMenuResponse(async function loadPageExact(interaction) {
		return loadPageNumber(interaction, interaction.values[0]);
	});

module.exports = command;