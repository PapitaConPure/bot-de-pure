const GuildConfig = require('../../localdata/models/guildconfigs.js');
const { CommandOptionsManager } = require('../Commons/cmdOpts.js');
const { p_pure } = require('../../localdata/prefixget.js');
const { fetchFlag, isNotModerator, randRange, fetchUserID } = require('../../func.js');
const { MessageEmbed, MessageActionRow, MessageButton, MessageSelectMenu, MessageCollector } = require('discord.js');

const options = new CommandOptionsManager()
	.addParam('id', 	  'TEXT',           'para especificar sobre qu√© Tub√©rculo operar')
	.addParam('mensaje',  'TEXT',           'para especificar el texto del mensaje',     { optional: true })
	.addParam('archivos', ['FILE','IMAGE'], 'para especificar los archivos del mensaje', { poly: 'MULTIPLE', optional: true })
	.addFlag(['c','m'], ['crear','agregar','a√±adir'], 'para crear o editar un Tub√©rculo')
	.addFlag('v', 		'ver', 		  				  'para ver detalles de un Tub√©rculo')
	.addFlag(['b','d'], ['borrar','eliminar'], 		  'para eliminar un Tub√©rculo')
	.addFlag('s', 		['script','pur√©','pure'], 	  'para usar Pur√©Script (junto a `-c`); reemplaza la funci√≥n de `<mensaje>`');

//Pur√©Script
/**
 * @param {import("../Commons/typings").CommandRequest} request
 * @param {{author: String, content?: String | null, files?: Array<String>, script?: Array<Array<String>>, inputs?: Array<{identifier: String, required: Boolean, desc: String}>}} tuber 
 */
const executeTuber = async(request, tuber, { args, isSlash }) => {
	if(tuber.script) {
		//Contenido de respuesta del Tub√©rculo
		let replyContent = {};

		//Errores PS
		let errors = 0;
		const psError = (description, line, operation) => {
			errors++;
			return request.reply({ content: `<‚ö†Ô∏è Error PS: \`${description} (Expresi√≥n ${line + 1}, Operaci√≥n ${operation.toUpperCase()})\`>` });
		};

		//#region Memoria del script
		/**@param {import('discord.js').GuildMember} m*/
		const getMemberProps = (m) => ({
			nombre: m.user.username,
			apodo: m.nickname ?? m.user.username,
			etiqueta: m.user.tag,
			avatar: m.user.avatarURL({ dynamic: true }),
		});

		let mem = {
			__functions__: {
				//Aleatoreidad
				/**@param {[Number, Number]} param0*/
				['dado']: ([min, max]) => randRange(min ?? 1, max ?? 7, true),
				/**@param {[Number, Number]} param0*/
				['dadoDecimal']: ([min, max]) => randRange(min ?? 0, max ?? 1, false),
				//Funcionalidad
				/**@param {[*]} param0*/
				['largo']: ([obj]) => obj.length ?? obj.size,
				/**@param {[String]} param0*/
				['minus']: ([text]) => text.toLowerCase(),
				/**@param {[String]} param0*/
				['mayus']: ([text]) => text.toUpperCase(),
				//Embeds
				/**@param {[MessageEmbed, String, String]} param0*/
				['marcoAgregarAutor']: ([embed, author, iconUrl]) => embed.setAuthor(author, iconUrl),
				/**@param {[MessageEmbed, String]} param0*/
				['marcoAgregarEncabezado']: ([embed, title]) => embed.setAuthor(title),
				/**@param {[MessageEmbed, String, String]} param0*/
				['marcoAgregarCampo']: ([embed, title, content, inline]) => embed.addField(title, content, inline),
			},
			archivos: isSlash ? [] : request.attachments.map(attachment => attachment.proxyURL),
			usuario: getMemberProps(request.member),
			entradas: {},
			funciones: {},
			VERDADERO: true,
			FALSO: false,
		};
		//Establecer claves iniciales como solo-lectura
		const readOnlyMem = Object.keys(mem);
		console.log('readOnlyMem:', readOnlyMem);
		//#endregion

		//#region Entradas personalizadas
		const fileRegex = /(http:\/\/|https:\/\/)?(www\.)?(([a-zA-Z0-9-]){2,}\.){1,4}([a-zA-Z]){2,6}\/[a-zA-Z-_\/\.0-9#:?=&;,]*\.(txt|png|jpg|jpeg|webp|gif|webm|mp4|mp3|wav|flac|ogg)[a-zA-Z-_\.0-9#:?=&;,]*/;
		if(tuber.inputs && args !== undefined && args !== null) {
			const argsList = (isSlash
				? options.fetchParamPoly(args, 'entradas', args.getString, null).filter(input => input)
				: args);
			const attachmentsList = [
				...request.attachments.map(attachment => attachment.proxyURL),
				...argsList.map(arg => arg.match(fileRegex) ? arg : undefined).filter(arg => arg),
			];
			const contentsList = argsList.filter(arg => arg);
			console.log('---------------------------------\ncontentsList:', contentsList, '\nattachmentsList:', attachmentsList, '\n- - - - - - -       - - - - - - -');
			
			const readyInputs = tuber.inputs.map((input, i) => {
				console.log(input, i);
				const arg = input.isAttachment ? attachmentsList.shift() : contentsList.shift();
				if(!arg && input.required) {
					psError(`se requiere que ingreses "${input.identifier}" (entrada N¬∫ ${i + 1}) para ejecutar este Tub√©rculo`, -2, 'INICIALIZAR');
					return false;
				}
				
				mem.entradas[input.identifier] = arg;
				return true;
			});
			console.log('entradas:', mem.entradas, '\nreadyInputs:', readyInputs, '\n---------------------------------');
			if(!readyInputs.every(input => input)) return await request.reply(`üõë Este Tub√©rculo requiere m√°s par√°metros.\nUsa \`${p_pure(request.guildId).raw}tub√©rculo --ayuda <TuberID>\` para m√°s informaci√≥n`);
		}
		//#endregion
		
		//#region Funciones internas
		const getLineString = (expression) => expression.join(' ');//.split(/[\n ]*#FIN#[\n ]*/).join('\n');
		const getAttribute = (sequence) => {
			const firstSequenced = sequence.shift().slice(1);
			if(!sequence.length && firstSequenced.endsWith('/'))
				return callMemFunction(firstSequenced);
				
			let att = mem[firstSequenced];
			console.log('getAttribute:', sequence, '| att:', att);
			sequence.forEach(a => {
				console.log('Antes de comprobar √≠ndice:', a);
				if(a.startsWith('$')) a = getAttribute([a]);
				console.log('Luego de comprobar √≠ndice:', a, '|', att[a]);
				if(att[a].startsWith('$')) {
					console.log('Referencia compleja detectada');
					if(att[a].endsWith('/'))
						att = callMemFunction(att[0]);
					else
						att = getAttribute(sequence);
				} else {
					console.log('Referencia simple detectada');
					att = att[a];
				}
			});
			console.log('att final:', att);
			return att;
		}
		const callMemFunction = (functionCall) => {
			const functionFactors = functionCall.split('/').filter(ff => ff);
			const fn = functionFactors.shift();
			console.log('Componiendo funci√≥n');
			const functionParams = functionFactors.map(ff => ff.startsWith('$') ? getAttribute([ff]) : ff);
			console.log('Factores de la funci√≥n', fn, '::', functionParams);
			if(mem.__functions__[fn])
				return (mem.__functions__[fn])(functionParams);
			else if(mem.funciones[fn]) {
				return '42';
			} else {
				psError(`la funci√≥n "${fn ?? ''}" no existe`, -2, 'AN√ìNIMA');
				return undefined;
			}
		}
		//Leer valores o punteros
		const readReference = (str) => {
			const rawReference = Array.isArray(str) ? str[0] : str;
			let reference;
			console.log('Referencia cruda:', rawReference);
			if(rawReference.startsWith('$')) {
				const sequence = rawReference.split('->');
				console.log('Secuencia:', sequence.length, 'pasos');
				reference = getAttribute(sequence);
			} else
				reference = getLineString(str);
			console.log('Referencia procesada:', reference);
			return reference;
		}
		
		const readLineReferences = (expr) => {
			console.log('Referencias crudas:', expr);
			const references = expr.map(w => {
				if(w.match(/^[\n*~`]*\$/)) {
					const sequences = w.split(/[\n*~`]+/).map(sequence => sequence.split('->'));
					return sequences.map(sequence => sequence[0].startsWith('$') ? getAttribute(sequence) : sequence[0]).join('\n');
				} else
					return w;
			});
			console.log('Referencias procesadas:', references);
			return references;
		}
		//#endregion

		//Ejecutar secuencia de expresiones
		await Promise.all(tuber.script.map((expression, l) => {
			const expr = [ ...expression ];
			console.log(`Expresi√≥n ${l}:`, expr.join(' '), '\tCon mem:', mem);
			let working = Promise.resolve(); //Promesa para cuando se est√©n realizando trabajos de fondo
			const operation = expr.shift().toLowerCase();
			switch(operation) {
				case 'registrar': {
					console.log('Operaci√≥n REGISTRAR');
					if(!expr.length) return psError('se esperaba contexto', l, operation);
					const target = expr.shift().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, '');
					if(!expr.length) return psError('se esperaba un identificador', l, operation);
					const identifier = expr.shift();
					if(expr.shift().toLowerCase() !== 'con') return psError('se esperaba "CON" en asignaci√≥n de carga', l, operation);
					if(!expr.length) return psError('se esperaba una asignaci√≥n', l, operation);
					const loadValue = expr.shift();

					switch(target) {
						case 'entrada':
							console.log('Registrando entrada');
							tuber.inputs = tuber.inputs ?? [];
							const processedValue = readReference([loadValue]);
							tuber.inputs.push({
								identifier: identifier,
								required: true,
								desc: '',
								isAttachment: loadValue.startsWith('$archivos') || loadValue.match(fileRegex),
							});
							mem.entradas[identifier] = processedValue;
							console.log(`Se registr√≥ una entrada "${identifier}" con valor de prueba`, loadValue , '->', processedValue);
							tuber.script[l] = [''];
							break;

						case 'funcion':
							return psError('el contexto REGISTRAR/FUNCI√ìN todav√≠a no est√° disponible', l, operation);

						case 'lista':
							return psError('el contexto REGISTRAR/LISTA todav√≠a no est√° disponible', l, operation);

						case 'conjunto':
							return psError('el contexto REGISTRAR/CONJUNTO todav√≠a no est√° disponible', l, operation);

						case 'texto':
							return psError('el contexto REGISTRAR/TEXTO todav√≠a no est√° disponible', l, operation);

						default:
							return psError('contexto inv√°lido', l, operation);
					}
					console.log(mem);
					break;
				}
				
				case 'crear': {
					console.log('Operaci√≥n CREAR');
					if(!expr.length) return psError('se esperaba contexto', l, operation);
					const target = expr.shift().toLowerCase();
					if(!expr.length) return psError('se esperaba un identificador', l, operation);
					const identifier = expr.shift();

					switch(target) {
						case 'lista':
							mem[identifier] = [];
							break;

						case 'conjunto':
							mem[identifier] = {};
							break;

						case 'texto':
							mem[identifier] = '';
							break;

						case 'marco':
							mem[identifier] = new MessageEmbed();
							break;

						default:
							return psError('contexto inv√°lido', l, operation);
					}
					console.log(mem);
					break;
				}

				case 'guardar': {
					console.log('Operaci√≥n GUARDAR');
					return psError('la palabra clave GUARDAR todav√≠a no est√° disponible', l, operation);
				}

				case 'cargar': {
					console.log('Operaci√≥n CARGAR');
					if(!expr.length) return psError('se esperaba un identificador', l, operation);
					const identifier = expr.shift();
					if(expr.shift().toLowerCase() !== 'con') return psError('se esperaba "CON" en asignaci√≥n de carga', l, operation);
					if(!expr.length) return psError('se esperaba una asignaci√≥n', l, operation);
					const loader = expr.shift().toLocaleLowerCase();
					let loadValue;
					try {
						switch(loader) {
							case 'lista':
								if(!expr.length) return psError('se esperaba un valor', l, operation);
								loadValue = readLineReferences(expr);
								break;
							case 'texto':
								if(!expr.length) return psError('se esperaba texto', l, operation);
								loadValue = readLineReferences(expr).join(' ');
								break;
							default:
								loadValue = readReference([loader]);
								break;
						}
					} catch(err) {
						console.error(err);
						return psError('referencia inv√°lida', l, operation, true);
					}
					//if(!expr.length) return psError('se esperaba un valor', l, operation);
					if(identifier.startsWith('$')) {
						console.log('Carga referencial');
						let memtemp = loadValue;
						const sequence = identifier.slice(1).split('->');
						if(!sequence.length) return psError('se esperaba un identificador', l, operation);
						if(readOnlyMem.includes(sequence[0])) return psError(`se intent√≥ modificar el valor de solo lectura "$${sequence[0]}"`, l, operation);

						//Leer
						let memRead = mem;
						sequence.slice(0, -1).forEach(sq => {
							memRead = mem[sq];
							console.log(memRead);
						});
						memRead = memRead ?? {};

						//Escribir
						sequence.slice(0).reverse().forEach(sq => {
							memtemp = { ...memRead, [`${sq}`]: memtemp };
							console.log(memtemp);
						});

						console.log('wasd', sequence[0], 'fg', mem[sequence[0]]);
						
						mem = { ...mem, ...memtemp };
					} else {
						console.log('Carga directa');
						if(readOnlyMem.includes(identifier)) return psError(`se intent√≥ modificar el valor de solo lectura "${identifier}"`, l, operation);
						mem[identifier] = loadValue;
					}
					
					console.log('Carga terminada con \n\tidentifier', identifier, '\n\tloader:', loader, '\n\tloadValue:', loadValue);
					break;
				}

				case 'extender': {
					console.log('Operaci√≥n EXTENDER');
					if(!expr.length) return psError('se esperaba un identificador', l, operation);
					const identifier = expr.shift();
					if(expr.shift().toLowerCase() !== 'con') return psError('se esperaba "CON" en extensi√≥n', l, operation);
					if(!expr.length) return psError('se esperaba una asignaci√≥n', l, operation);
					const loader = expr.shift().toLocaleLowerCase();
					let loadValue;
					try {
						switch(loader) {
							case 'lista':
								if(!expr.length) return psError('se esperaba un valor', l, operation);
								loadValue = readLineReferences(expr);
								break;
							case 'texto':
								if(!expr.length) return psError('se esperaba texto', l, operation);
								loadValue = readLineReferences(expr).join(' ');
								break;
							default:
								loadValue = readReference([loader]);
								break;
						}
					} catch(err) {
						console.error(err);
						return psError('referencia inv√°lida', l, operation, true);
					}
					let memRead = mem;

					if(identifier.startsWith('$')) {
						console.log('Carga referencial');
						const sequence = identifier.slice(1).split('->');
						if(!sequence.length) return psError('se esperaba un identificador', l, operation);

						//Leer
						sequence.forEach(sq => {
							memRead = mem[sq];
							console.log(memRead);
						});
					} else {
						console.log('Carga directa');
						memRead = mem[identifier];
					}
					//Escribir
					if(memRead === undefined || memRead === null)
						return psError(`el identificador "${identifier}" no existe`, l, operation);
					if(!Array.isArray(memRead))
						return psError(`el identificador ${identifier} no corresponde a una lista`, l, operation);

					memRead.push(loadValue);
					console.log('Carga terminada con \n\tidentifier', identifier, '\n\tloader:', loader, '\n\tloadValue:', loadValue);
					break;
				}

				case 'ejecutar': {
					console.log('Operaci√≥n EJECUTAR');
					if(!expr.length) return psError('se esperaba un valor o funci√≥n', l, operation);
					readLineReferences(expr);
					break;
				}

				case 'enviar': {
					console.log('Operaci√≥n ENVIAR');
					const message = {};
					if(!expr.length) return psError('no se puede enviar un mensaje vac√≠o', l, operation);
					const target = expr.shift().toLowerCase();
					const values = (target === 'marcos')
						? expr.map(e => e.startsWith('$') ? getAttribute([e]) : e)
						: readLineReferences(expr).filter(refVal => refVal !== undefined && refVal !== null);
					if(!values.length) return psError('los valores especificados no existen', l, operation);
					console.log('Valores obtenidos para enviar: ', values);
					
					switch(target) {
						case 'archivos':
							message.files = values;
							console.log('message.files:', message.files);
							break;

						case 'marcos':
							message.embeds = values;
							console.log('message.embeds:', message.embeds);
							break;

						case 'texto':
							message.content = values.join(' ');
							break

						default:
							return psError('se esperaba contenido de mensaje', l, operation);
					}
					replyContent = { ...replyContent, ...message };
				}

				default: {
					console.log('Operaci√≥n *');
					break;
				}
			}
			return working;
		}));
		console.log('Memoria final:', mem, '\nErrores:', errors, '\nContenido de respuesta:', replyContent);
		if(!Object.keys(replyContent).length)
			await psError('debes enviar al menos un texto u archivo', -2, 'RECOPILAR');

		if(errors) {
			await request.reply({ content: `‚ö†Ô∏è Se han encontrado **${errors} Errores PS** en la ejecuci√≥n de Pur√©Script` });
			return new Error('Error de Pur√©Script');
		} else
			return await request.reply(replyContent);
	} else
		return await request.reply({
			content: tuber.content,
			files: tuber.files,
		});
};

const pageMax = 10;
const paginationRows = (page, backward, forward, lastPage) => {
	let i = 0;
	return [
		new MessageActionRow().addComponents(
			new MessageButton()
			.setCustomId('tub√©rculo_loadPage_0_START')
			.setEmoji('934430008586403900')
			.setStyle('SECONDARY'),
			new MessageButton()
				.setCustomId(`tub√©rculo_loadPage_${backward}_BACKWARD`)
				.setEmoji('934430008343158844')
				.setStyle('SECONDARY'),
			new MessageButton()
				.setCustomId(`tub√©rculo_loadPage_${forward}_FORWARD`)
				.setEmoji('934430008250871818')
				.setStyle('SECONDARY'),
			new MessageButton()
				.setCustomId(`tub√©rculo_loadPage_${lastPage}_END`)
				.setEmoji('934430008619962428')
				.setStyle('SECONDARY'),
			new MessageButton()
				.setCustomId(`tub√©rculo_loadPage_${page}_RELOAD`)
				.setEmoji('934432754173624373')
				.setStyle('PRIMARY'),
		),
		new MessageActionRow().addComponents(
			new MessageSelectMenu()
				.setCustomId('tub√©rculo_loadPageExact')
				.setPlaceholder('Seleccionar p√°gina')
				.setOptions(Array(Math.min(lastPage + 1, 24)).fill(null).map(() => ({
					value: `${i}`,
					label: `P√°gina ${++i}`,
				}))),
		),
		new MessageActionRow().addComponents(
			new MessageButton()
				.setCustomId('tub√©rculo_filterAuthor')
				.setLabel('Filtrar Autor')
				.setEmoji('936530498061213756')
				.setStyle('SUCCESS'),
			new MessageButton()
				.setCustomId('tub√©rculo_filterTuberID')
				.setLabel('Filtrar TuberID')
				.setEmoji('936530498061213756')
				.setStyle('SUCCESS'),
			new MessageButton()
				.setCustomId('tub√©rculo_filterClear')
				.setLabel('Mostrar todo')
				.setEmoji('936531643496288288')
				.setStyle('DANGER'),
		),
	]
};

module.exports = {
	name: 'tub√©rculo',
	aliases: [
		'tuberculo',
		'tubercle', 'tuber', 't'
	],
	brief : 'Permite crear, editar, listar, borrar o ejecutar comandos personalizados de servidor',
	desc: [
		'Permite `--crear`, *editar*, *listar*, `--borrar` o __ejecutar__ Tub√©rculos (comandos personalizados de servidor).',
		'Usar el comando sin m√°s listar√° todos los Tub√©rculos de los que dispone el servidor actual',
		'En caso de estar creando un Tub√©rculo, se requerir√° un `<mensaje>` y/o `<archivos>`, junto a la `<id>` que quieras darle al mismo. Si la ID ya est√° registrada, ser√° *reemplazada (editada)*',
		'En cualquier parte del contenido del mensaje, coloca "#FIN#" para bajar un rengl√≥n',
		'En caso de estar editando o borrando un Tub√©rculo existente, se requerir√° su TuberID',
		'‚ö†Ô∏è Ten en cuenta que este comando es experimental y cualquier Tub√©rculo ingresado podr√≠a ser eventualmente perdido a medida que me actualizo',
	].join('\n'),
	flags: [
		'common',
	],
	options,
	callx: '<id?> <mensaje?> <archivos?>',
	experimental: true,
	
	/**
	 * @param {import("../Commons/typings").CommandRequest} request
	 * @param {import('../Commons/typings').CommandOptions} args
	 * @param {Boolean} isSlash
	 */
	async execute(request, args, isSlash = false) {
		//Determinar operaci√≥n
		const helpstr = `Usa \`${p_pure(request.guild).raw}ayuda ${module.exports.name}\` para m√°s informaci√≥n`;
		const operation = (isSlash
			? [
				args.getBoolean('crear' ) ? 'crear'  : undefined,
				args.getBoolean('ver'   ) ? 'ver' 	 : undefined,
				args.getBoolean('borrar') ? 'borrar' : undefined,
			] : [
				fetchFlag(args, { ...options.flags.get('crear').structure,  callback: 'crear'  }),
				fetchFlag(args, { ...options.flags.get('ver').structure,  	callback: 'ver'    }),
				fetchFlag(args, { ...options.flags.get('borrar').structure, callback: 'borrar' }),
			]
		).find(op => op);
		const ps = isSlash ? args.getBoolean('script') : fetchFlag(args, { ...options.flags.get('script').structure, callback: true });

		//Adquirir ID de Tub√©rculo
		const id = isSlash ? args.getString('id') : args.shift();

		//Preparar ejecuci√≥n
		const gid = request.guild.id;
		const guildquery = { guildId: gid };
		const gcfg = (await GuildConfig.findOne(guildquery)) || new GuildConfig(guildquery);
		const members = request.guild.members.cache;

		
		gcfg.tubers = gcfg.tubers || {};

		if(!operation && !id) { //Listar Tub√©rculos
			const items = Object.entries(gcfg.tubers).reverse();
			const lastPage = Math.ceil(items.length / pageMax) - 1;
			return await request.reply({
				embeds: [
					new MessageEmbed()
						.setColor('LUMINOUS_VIVID_PINK')
						.setAuthor(request.guild.name, request.guild.iconURL())
						.setTitle('Arsenal de Tub√©rculos del Servidor')
						.addField(
							`ü•î)‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨{ ${items.length ? `1 / ${lastPage + 1}` : '- - -'} }‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨(ü•î`, 
							items.length
								? items.splice(0, pageMax)
									.map(([tid,tuber]) => `**${tid}** ‚Ä¢ ${(members.get(tuber.author) ?? request.guild.me).user.username}`)
									.join('\n')
								: `Este servidor no tiene ning√∫n Tub√©rculo.\nComienza a desplegar TuberIDs con \`${p_pure(request.guildId)}tub√©rculo --crear\``,
							true,
						),
				],
				components: (items.length < pageMax) ? null : paginationRows(0, lastPage, 1, lastPage),
			});
		} else { //Realizar operaci√≥n sobre ID de Tub√©rculo
			if(!id) return await request.reply({ content: `‚ö†Ô∏è Debes ingresar una TuberID v√°lida\n${helpstr}` });

			switch(operation) {
				case 'crear':
					if(id.length > 24)
						return await request.reply({ content: '‚ö†Ô∏è Las TuberID solo pueden medir hasta 24 caracteres' });
					if(gcfg.tubers[id] && isNotModerator(request.member) && gcfg.tubers[id].author !== (request.author ?? request.user).id)
						return await request.reply({ content: `‚õî Acci√≥n denegada. Esta TuberID **${id}** le pertenece a *${(request.guild.members.cache.get(gcfg.tubers[id].author) ?? request.guild.me).user.username}*` });
					
					const tuberContent = { author: (request.user ?? request.author).id };
					const mcontent = (isSlash ? options.getString('mensaje') : args.join(' ')).split(/[\n ]*#FIN#[\n ]*/).join('\n');
					const mfiles = isSlash ? options.fetchParamPoly(args, 'archivos', args.getString, null).filter(att => att) : (request.attachments || []).map(att => att.proxyURL);

					//Incluir Tub√©rculo; crear colecci√≥n de Tub√©rculos si es necesario
					if(ps) {
						if(!mcontent)
							return await request.reply({ content: `‚ö†Ô∏è Este Tub√©rculo requiere ingresar Pur√©Script\n${helpstr}` });
						tuberContent.script = mcontent.split(/ *;+ */).map(line => line.split(/ +/).filter(word => word !== '```')).filter(line => line.length);
					} else {
						if(!mcontent && !mfiles.length)
							return await request.reply({ content: `‚ö†Ô∏è Debes ingresar un mensaje o archivo para registrar un Tub√©rculo\n${helpstr}` });
						if(mcontent) tuberContent.content = mcontent;
						if(mfiles.length) tuberContent.files = mfiles;
					}

					gcfg.tubers[id] = tuberContent;
					
					try {
						console.log('Ejecutando Pur√©Script:', gcfg.tubers[id]);
						await executeTuber(request, gcfg.tubers[id], { isSlash });
						console.log('Pur√©Script ejecutado:', gcfg.tubers[id]);
						if(gcfg.tubers[id].script) {
							gcfg.tubers[id].script = gcfg.tubers[id].script.filter(expr => expr && expr.some(w => w));
							console.log('Script guardado:', gcfg.tubers[id].script);
						}
						gcfg.markModified('tubers');
					} catch(error) {
						console.log('Ocurri√≥ un error al a√±adir un nuevo Tub√©rculo');
						console.error(error);
						return await request.reply({ content: '‚ùå Hay un problema con el Tub√©rculo que intentaste crear, por lo que no se registrar√°' });
					}
					break;

				case 'ver':
					const item = gcfg.tubers[id];
					if(!item)
						return await request.reply({ content: `‚ö†Ô∏è El Tub√©rculo **${id}** no existe` });

					const embed = new MessageEmbed()
					.setColor('DARK_VIVID_PINK')
					.setAuthor(request.guild.name, request.guild.iconURL())
					.addField('Visor de Tub√©rculos', [
						`**TuberID** ${id}`,
						`**Autor** ${(request.guild.members.cache.get(item.author) ?? request.guild.me).user.username}`,
						`**Descripci√≥n** ${item.desc ?? '*Este Tub√©rculo no tiene descripci√≥n*'}`,
					].join('\n'));
					
					if(item.script)
						embed.addField('Pur√©Script', [
							`**Entradas** \`[${(item.inputs ?? []).map(i => i.identifier).join(', ')}]\``,
							'```',
							`${item.script.map(expr => expr.join(' ')).join(';\n')}`,
							'```',
						].join('\n'));
					else {
						if(item.content) embed.addField('Mensaje', item.content);
						if(item.files && item.files.length) embed.addField('Archivos', item.files.map((f,i) => `[${i}](${f})`).join(', '));
					}

					return await request.reply({
						embeds: [embed],
						//components: *algo*,
					});
				
				case 'borrar':
					if(!gcfg.tubers[id])
						return await request.reply({ content: `‚ö†Ô∏è El Tub√©rculo **${id}** no existe` });
					if(isNotModerator(request.member) && gcfg.tubers[id].author !== (request.author ?? request.user).id)
						return await request.reply({ content: `‚õî Acci√≥n denegada. Esta TuberID **${id}** le pertenece a *${(request.guild.members.cache.get(gcfg.tubers[id].author) ?? request.guild.me).user.username}*` });

					gcfg.tubers[id] = null;
					delete gcfg.tubers[id];
					gcfg.markModified('tubers');
					request.reply({ content: '‚úÖ Tub√©rculo eliminado con √©xito' });
					break;
				
				default:
					if(!gcfg.tubers[id]) return await request.reply({
						content: [
							`‚ö†Ô∏è El Tub√©rculo **${id}** no existe`,
							ps ? '¬øEst√°s intentando crear un Tub√©rculo con Pur√©Script? Usa la bandera `--crear` junto a `--script` (o `-cs` para la versi√≥n corta)' : undefined,
						].filter(str => str).join('\n'),
					});
					await executeTuber(request, gcfg.tubers[id], { args, isSlash })
					.catch(error => {
						console.log('Ocurri√≥ un error al ejecutar un Tub√©rculo');
						console.error(error);
						request.reply({ content: '‚ùå Parece que hay un problema con este Tub√©rculo. Prueba cre√°ndolo nuevamente o elimin√°ndolo si no se usa m√°s' });
					});
					break;
			}
		}
		gcfg.save(); //Guardar en Configuraciones de Servidor si se cambi√≥ algo
	},

	async getItemsList(guild, content, page) {
		const gcfg = await GuildConfig.findOne({ guildId: guild.id });
		let items = Object.entries(gcfg.tubers).reverse();
		if(content) {
			const filter = content.split(': ');
			const [ focus, value ] = filter;
			if(focus === 'Autor')
				items = items.filter(([_,tuber]) => tuber.author === value);
			else
				items = items.filter(([tid,_]) => tid === value);
		}

		const lastPage = Math.ceil(items.length / pageMax) - 1;
		const backward = (page > 0) ? (page - 1) : lastPage;
		const forward = (page < lastPage) ? (page + 1) : 0;
		
		return {
			items,
			lastPage,
			backward,
			forward,
		};
	},

	/**
	 * 
	 * @param {import('discord.js').ButtonInteraction} interaction 
	 * @param {Array<any>} param1 
	 */
	async ['loadPage'](interaction, [ page ]) {
		page = parseInt(page);
		const { guild, message } = interaction;
		const { items, lastPage, backward, forward } = await module.exports.getItemsList(guild, message.content, page);
		const members = guild.members.cache;
		const oembed = message.embeds[0];

		return await interaction.update({
			embeds: [
				new MessageEmbed()
					.setColor(oembed.color)
					.setAuthor(oembed.author.name, oembed.author.url)
					.setTitle(oembed.title)
					.addField(`ü•î)‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨{ ${page + 1} / ${lastPage + 1} }‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨(ü•î`,
						items.length
							? items.splice(page * pageMax, pageMax)
								.map(([tid,tuber]) => `**${tid}** ‚Ä¢ ${(members.get(tuber.author) ?? guild.me).user.username}`)
								.join('\n')
							: `Ning√∫n Tub√©rculo coincide con la b√∫squeda actual`,
						true,
					),
			],
			components: (items.length < pageMax) ? null : paginationRows(page, backward, forward, lastPage),
		});
	},

	/**
	 * 
	 * @param {import('discord.js').ButtonInteraction} interaction 
	 * @param {Array<any>} param1 
	 */
	async ['filterAuthor'](interaction) {
		const { guild, client, message } = interaction;
		const members = guild.members.cache;
		const oembed = message.embeds[0];

		const filter = (m) => m.author.id === interaction.user.id;
		const filterCollector = new MessageCollector(interaction.channel, { filter: filter, time: 1000 * 60 * 2 });
		filterCollector.on('collect', async collected => {
			const userId = fetchUserID(collected.content, { guild, client });
			if(!userId) return;
			const content = `Autor: ${userId}`
			const { items, lastPage, backward, forward } = await module.exports.getItemsList(guild, content, 0);
			await interaction.message.edit({
				content,
				embeds: [
					new MessageEmbed()
						.setColor(oembed.color)
						.setAuthor(oembed.author.name, oembed.author.url)
						.setTitle(oembed.title)
						.addField(`ü•î)‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨{ 1 / ${lastPage + 1} }‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨(ü•î`,
							items.length
								? items.splice(0, pageMax)
									.map(([tid,tuber]) => `**${tid}** ‚Ä¢ ${(members.get(tuber.author) ?? guild.me).user.username}`)
									.join('\n')
								: `Ning√∫n Tub√©rculo coincide con la b√∫squeda actual`,
							true,
						),
				],
				components: (items.length < pageMax) ? null : paginationRows(0, backward, forward, lastPage),
			});
			filterCollector.stop();
		});

		await interaction.reply({
			content: 'Env√≠a el usuario a filtrar',
			ephemeral: true,
		});
	},

	/**
	 * 
	 * @param {import('discord.js').ButtonInteraction} interaction 
	 * @param {Array<any>} param1 
	 */
	async ['filterTuberID'](interaction) {
		const { guild, message } = interaction;
		const members = guild.members.cache;
		const oembed = message.embeds[0];

		const filter = (m) => m.author.id === interaction.user.id;
		const filterCollector = new MessageCollector(interaction.channel, { filter: filter, time: 1000 * 60 * 2 });
		filterCollector.on('collect', async collected => {
			const content = `TuberID: ${collected.content}`;
			const { items, lastPage, backward, forward } = await module.exports.getItemsList(guild, content, 0);
			await interaction.message.edit({
				content,
				embeds: [
					new MessageEmbed()
						.setColor(oembed.color)
						.setAuthor(oembed.author.name, oembed.author.url)
						.setTitle(oembed.title)
						.addField(`ü•î)‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨{ 1 / ${lastPage + 1} }‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨‚ñ¨\\~‚Ä¢\\~‚ñ¨‚ñ¨(ü•î`,
							items.length
								? items.splice(0, pageMax)
									.map(([tid,tuber]) => `**${tid}** ‚Ä¢ ${(members.get(tuber.author) ?? guild.me).user.username}`)
									.join('\n')
								: `Ning√∫n Tub√©rculo coincide con la b√∫squeda actual`,
							true,
						),
				],
				components: (items.length < pageMax) ? null : paginationRows(0, backward, forward, lastPage),
			});
			filterCollector.stop();
		});

		await interaction.reply({
			content: 'Env√≠a una TuberID a filtrar',
			ephemeral: true,
		});
	},

	/**
	 * 
	 * @param {import('discord.js').ButtonInteraction} interaction 
	 * @param {Array<any>} param1 
	 */
	async ['filterClear'](interaction) {
		if(interaction.message.content) {
			await interaction.message.edit({ content: null });
			return await module.exports['loadPage'](interaction, [0]);
		} else
			return await interaction.reply({
				content: '‚ö† Esta lista ya muestra todos los resultados',
				ephemeral: true,
			});
	},

	/**
	 * 
	 * @param {import('discord.js').SelectMenuInteraction} interaction
	 */
	async ['loadPageExact'](interaction) {
		module.exports['loadPage'](interaction, [ interaction.values[0] ]);
	},
};