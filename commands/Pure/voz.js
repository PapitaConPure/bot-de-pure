const PureVoice = require('../../localdata/models/purevoice.js');
const { MessageEmbed, MessageActionRow, MessageButton, MessageCollector } = require('discord.js');
const { p_pure } = require('../../localdata/prefixget.js');
const { isNotModerator, fetchFlag } = require('../../func.js');
const { CommandOptionsManager } = require('../Commons/cmdOpts.js');

const cancelbutton = (id) => new MessageButton()
	.setCustomId(`voz_cancelWizard_${id}`)
	.setLabel('Cancelar')
	.setStyle('SECONDARY');
const collectors = {};
/**
 * @param {Number} stepCount
 * @param {String} stepName
 * @param {import('discord.js').ColorResolvable} stepColor
 * @param {String} route
 */
const wizEmbed = (iconUrl, stepName, stepColor, route = 'none') => {
	//const routes = {
	//	['create']: 	5, //2 + seleccionar categor√≠a + seleccionar/crear canal de texto + seleccionar/crear/ignorar canal de voz AFK
	//	['edit']: 		4, //2 + seleccionar operaci√≥n + operaci√≥n
	//	['delete']: 	3, //2 + confirmaci√≥n/opciones de borrado
	//};
	return new MessageEmbed()
		.setColor(stepColor)
		.setAuthor('Asistente de Configuraci√≥n de Sistema Pur√©Voice', iconUrl)
		.setFooter(stepName);
};

const options = new CommandOptionsManager()
	.addParam('nombre', 'TEXT', 'para decidir el nombre de la sesi√≥n actual', { optional: true })
	.addFlag('aiw', ['asistente','instalador','wizard'], 'para inicializar el Asistente de Configuraci√≥n');

module.exports = {
	name: 'voz',
	aliases: [
		'pur√©voz', 'purevoz',
		'pur√©voice', 'purevoice', 'voice',
	],
	brief: 'Para inyectar un Sistema Pur√©Voice en una categoria por medio de un Asistente',
	desc: 'Para inyectar un Sistema Pur√©Voice en una categoria. Simplemente usa el comando y sigue los pasos del Asistente para configurar todo',
	flags: [
		'common',
	],
	options: options,
	experimental: true,
	callx: options.callSyntax,
	
	/**
	 * @param {import("../Commons/typings").CommandRequest} request
	 * @param {import('../Commons/typings').CommandOptions} args
	 * @param {Boolean} isSlash
	 */
	async execute(request, args, isSlash = false) {
		//Acci√≥n de comando
		const generateWizard = isSlash
		? args.getBoolean('asistente')
		: fetchFlag(args, { ...options.flags.get('asistente').structure, callback: true });
		
		//Cambiar nomre de canal de voz de sesi√≥n
		if(!generateWizard) {
			const helpstr = `Usa \`${p_pure(request.guildId).raw}ayuda voz\` para m√°s informaci√≥n`;
			const sessionName = isSlash
				? args.getString('nombre')
				: args.join(' ');

			if(!sessionName)
				return await request.reply({
					content: [
						'‚ö† Debes ingresar un nombre para ejecutar este comando de esta forma',
						'Si est√°s buscando iniciar un Asistente de Configuraci√≥n, usa la bandera `--asistente` o `-a`',
						helpstr,
					].join('\n'),
					ephemeral: true,
				});
			
			if(sessionName.length > 24)
				return await request.reply({
					content: '‚ö† Intenta acortar un poco el nombre. El l√≠mite para nombres de sesi√≥n es de 24(+3) caracteres',
					ephemeral: true,
				});
			
			//Comprobar si se est√° en una sesi√≥n
			/**@type {import('discord.js').VoiceState}*/
			const voiceState = request.member.voice;
			const warnNotInSession = () => request.reply({
				content: [
					'‚ö† Debes entrar a una sesi√≥n Pur√©Voice para ejecutar este comando de esta forma.',
					helpstr,
				].join('\n'),
				ephemeral: true,
			}).catch(console.error);
			if(!voiceState.channelId)
				return await warnNotInSession();
			const pv = await PureVoice.findOne({ guildId: request.guildId });
			if(!(pv && pv.sessions.map(session => session.voiceId).includes(voiceState.channelId)))
				return await warnNotInSession();

			//Modificar sesi√≥n y confirmar
			const chcache = request.guild.channels.cache;
			const { textId, voiceId } = pv.sessions.find(session => session.voiceId === voiceState.channelId);
			if(!voiceState.channel.name.match('üí†„Äå„Äç')) return await request.reply({ content: '‚ùå Por cuestiones t√©cnicas, solo puedes cambiar el nombre de la sesi√≥n una vez.\nSi quieres cambiar el nombre, con√©ctate a una nueva sesi√≥n' })
			let sessionNumber = voiceState.channel.name.match(/\d+/);
			if(sessionNumber) sessionNumber = sessionNumber[0];
			await chcache.get(voiceId).setName(`üí†„Äå${sessionName}„Äç`).catch(console.error);
			await chcache.get(textId).setName(`${sessionName.toLowerCase().split().join('-')}`).catch(console.error);
			return await request.reply({ content: '‚úÖ Nombre aplicado', ephemeral: true }).catch(console.error);
		}
		
		//Inicializar instalador Pur√©Voice
		if(isNotModerator(request.member)) return await request.reply({ content: '‚ùå No tienes permiso para hacer esto', ephemeral: true });
		const wizard = wizEmbed(request.client.user.avatarURL(), '1/? ‚Ä¢ Comenzar', 'AQUA')
		.addField('Bienvenido', 'Si es la primera vez que configuras un Sistema Pur√©Voice, ¬°no te preocupes! Solo sigue las instrucciones del Asistente y adapta tu Feed a lo que quieras');
		const uid = (request.author ?? request.user).id;
		return await request.reply({
			embeds: [wizard],
			components: [new MessageActionRow().addComponents(
				new MessageButton()
					.setCustomId(`voz_startWizard_${uid}`)
					.setLabel('Comenzar')
					.setStyle('PRIMARY'),
				cancelbutton(uid),
			)],
		});
	},

	/**
	 * @param {import('discord.js').ButtonInteraction} interaction 
	 * @param {Array<String>} param1 
	 */
	async ['startWizard'](interaction, [ authorId ]) {
		const { user, guild } = interaction;
		if(user.id !== authorId)
			return await interaction.reply({ content: ':x: No puedes hacer esto', ephemeral: true });
		
		const wizard = wizEmbed(interaction.client.user.avatarURL(), '2/? ‚Ä¢ Seleccionar Operaci√≥n', 'NAVY')
			.addField('Inyecci√≥n de Sistema Pur√©Voice', '¬øQu√© deseas hacer ahora mismo?');
			
		const pv = await PureVoice.findOne({ guildId: guild.id });
		const uid = user.id;
		const row = new MessageActionRow();
		const isInstalled = pv && guild.channels.cache.get(pv.categoryId) && guild.channels.cache.get(pv.voiceMakerId);
		if(!isInstalled)
			row.addComponents(
				new MessageButton()
					.setCustomId(`voz_selectInstallation_${uid}`)
					.setLabel('Instalar')
					.setStyle('PRIMARY'),
			);
		else 
			row.addComponents(
				new MessageButton()
					.setCustomId(`voz_relocateSystem_${uid}`)
					.setLabel('Reubicar')
					.setStyle('PRIMARY'),
			);

		row.addComponents(
			new MessageButton()
				.setCustomId(`voz_deleteSystem_${uid}`)
				.setLabel('Desinstalar')
				.setStyle('DANGER')
				.setDisabled(!isInstalled),
			cancelbutton(uid),
		);
		return await interaction.update({
			embeds: [wizard],
			components: [row],
		});
	},

	/**
	 * @param {import('discord.js').ButtonInteraction} interaction 
	 * @param {Array<String>} param1 
	 */
	async ['selectInstallation'](interaction, [ authorId ]) {
		if(interaction.user.id !== authorId)
			return await interaction.reply({ content: ':x: No puedes hacer esto', ephemeral: true });

		const wizard = wizEmbed(interaction.client.user.avatarURL(), '3/4 ‚Ä¢ Seleccionar instalaci√≥n', 'GOLD')
			.addField('Instalaci√≥n', 'Selecciona el tipo de instalaci√≥n que deseas realizar');
		const row = new MessageActionRow().addComponents(
			new MessageButton()
				.setCustomId(`voz_installSystem_${authorId}_new`)
				.setLabel('Crear categor√≠a con Pur√©Voice')
				.setStyle('SUCCESS'),
			new MessageButton()
				.setCustomId(`voz_installSystem_${authorId}`)
				.setLabel('Inyectar Pur√©Voice en categor√≠a')
				.setStyle('PRIMARY'),
			cancelbutton(authorId),
		);
		return await interaction.update({
			embeds: [wizard],
			components: [row],
		});
	},

	/**
	 * @param {import('discord.js').ButtonInteraction} interaction 
	 * @param {Array<String>} param1 
	 */
	async ['installSystem'](interaction, [ authorId, createNew ]) {
		if(interaction.user.id !== authorId)
			return await interaction.reply({ content: ':x: No puedes hacer esto', ephemeral: true });
		
		const filter = (m) => m.author.id === authorId;
		collectors[interaction.id] = new MessageCollector(interaction.channel, { filter: filter, time: 1000 * 60 * 2 });
		collectors[interaction.id].on('collect', async collected => {
			let ccontent = collected.content;
			let category;
			if(!createNew) {
				if(ccontent.startsWith('<#') && ccontent.endsWith('>')) {
					ccontent = ccontent.slice(2, -1);
					if(ccontent.startsWith('!')) ccontent = ccontent.slice(1);
				}
				const categories = interaction.guild.channels.cache.filter(c => c.type === 'GUILD_CATEGORY');
				category = isNaN(ccontent)
					? categories.find(c => c.name.toLowerCase().indexOf(ccontent) !== -1)
					: categories.find(c => c.id === ccontent);
				if(category) {
					collected.delete().catch(() => console.log('Error menor al borrar mensaje recolectado'));
					collectors[interaction.id].stop();
				} else return;
			} else {
				await collected.delete().catch(() => console.log('Error menor al borrar mensaje recolectado'));
				category = await interaction.guild.channels.create(ccontent, { type: 'GUILD_CATEGORY', reason: 'Categor√≠a recipiente de Pur√©Voice' });
			}
			
			try {
				const voiceMaker = await interaction.guild.channels.create('‚ûï Nueva Sesi√≥n', {
					type: 'GUILD_VOICE',
					parent: category.id,
					bitrate: 64 * 1000,
					userLimit: 1,
					reason: 'Desplegar Canal Autoextensible Pur√©Voice',
				});

				//Guardar nueva categor√≠a Pur√©Voice
				const guildQuery = { guildId: interaction.guild.id };
				await PureVoice.deleteOne(guildQuery);
				const pv = new PureVoice({
					...guildQuery,
					categoryId: category.id,
					voiceMakerId: voiceMaker.id,
				});

				const wizard = wizEmbed(interaction.client.user.avatarURL(), 'Operaci√≥n finalizada', 'GREEN')
					.addField('Categor√≠a creada e inyectada', [
						'Se ha creado una categor√≠a que ahora escala de forma din√°mica sus canales de voz.',
						`Puedes reubicar el Sistema Pur√©Voice creado en el futuro, solo usa \`${p_pure(interaction.guildId).raw}voz\` otra vez`,
					].join('\n'));

				const finished = await Promise.all([
					pv.save(),
					interaction.message.edit({
						embeds: [wizard],
						components: [],
					}),
				]);
				collectors[interaction.id].stop();
				delete collectors[interaction.id];
				return finished;
			} catch(error) {
				console.error(error);
				return await interaction.channel.send({ content: [
					'‚ö† Ocurri√≥ un error al crear esta categor√≠a',
					'Aseg√∫rate de que tenga los permisos necesarios para realizar esta acci√≥n (administrar canales)',
					'Tambi√©n, verifica que el nombre ingresado no est√© ya ocupado por alguna otra categor√≠a o canal',
				].join('\n') });
			}
		});
		
		const wizard = wizEmbed(interaction.client.user.avatarURL(), `4/4 ‚Ä¢ ${createNew ? 'Nombrar' : 'Seleccionar'} categor√≠a`, 'NAVY')
			.addField(`${createNew ? 'Creaci√≥n' : 'Selecci√≥n'} de categor√≠a`, 'Menciona el nombre de la categor√≠a antes de inyectarle Pur√©Voice');
		const uid = interaction.user.id;
		const row = new MessageActionRow().addComponents(
			new MessageButton()
				.setCustomId(`voz_startWizard_${uid}`)
				.setLabel('Volver')
				.setStyle('SECONDARY'),
			cancelbutton(uid),
		);
		return await interaction.update({
			embeds: [wizard],
			components: [row],
		});
	},

	/**
	 * @param {import('discord.js').ButtonInteraction} interaction 
	 * @param {Array<String>} param1 
	 */
	async ['deleteSystem'](interaction, [ authorId ]) {
		if(interaction.user.id !== authorId)
			return await interaction.reply({ content: ':x: No puedes hacer esto', ephemeral: true });
		
		const wizard = wizEmbed(interaction.client.user.avatarURL(), 'Confirmar desinstalaci√≥n', 'YELLOW')
			.addField('Desinstalaci√≥n del Sistema Pur√©Voice del servidor', 'Esto borrar√° todas los canales creados por el Sistema. La categor√≠a del Sistema y los canales creados manualmente se ignorar√°n.\nConfirma la desasociaci√≥n del servidor con Pur√©Voice');
		const uid = interaction.user.id;
		const row = new MessageActionRow().addComponents(
			new MessageButton()
				.setCustomId(`voz_deleteSystemConfirmed_${uid}`)
				.setLabel('DESINSTALAR')
				.setStyle('DANGER'),
			new MessageButton()
				.setCustomId(`voz_startWizard_${uid}`)
				.setLabel('Volver')
				.setStyle('SECONDARY'),
			cancelbutton(uid),
		);
		return await interaction.update({
			embeds: [wizard],
			components: [row],
		});
	},

	/**
	 * @param {import('discord.js').ButtonInteraction} interaction 
	 * @param {Array<String>} param1 
	 */
	async ['deleteSystemConfirmed'](interaction, [ authorId ]) {
		if(interaction.user.id !== authorId)
			return await interaction.reply({ content: ':x: No puedes hacer esto', ephemeral: true });

		//Eliminar Sistema Pur√©Voice
		const guildQuery = { guildId: interaction.guild.id };
		const pv = await PureVoice.findOne(guildQuery);
		if(pv) {
			const guildChannels = interaction.guild.channels.cache;
			await guildChannels.get(pv.voiceMakerId).delete(`Pur√©Voice desinstalado por ${interaction.user.tag}`);
			await Promise.all(pv.sessions.map(({ textId, voiceId }) => Promise.all([
				guildChannels.get(textId).delete().catch(console.error),
				guildChannels.get(voiceId).delete().catch(console.error),
			])));
		}
		await PureVoice.deleteOne(guildQuery);
		
		const deleteEmbed = wizEmbed(interaction.client.user.avatarURL(), 'Operaci√≥n finalizada', 'RED')
			.addField('Sistema Pur√©Voice eliminado', 'Se elimin√≥ el Sistema Pur√©Voice asociado al servidor');
		return await interaction.update({
			embeds: [deleteEmbed],
			components: [],
		});	
	},

	/**
	 * @param {import('discord.js').ButtonInteraction} interaction 
	 * @param {Array<String>} param1 
	 */
	async ['cancelWizard'](interaction, [ authorId ]) {
		if(interaction.user.id !== authorId)
			return await interaction.reply({ content: ':x: No puedes hacer esto', ephemeral: true });
		
		const cancelEmbed = wizEmbed(interaction.client.user.avatarURL(), 'Operaci√≥n abortada', 'NOT_QUITE_BLACK')
			.addField('Asistente cancelado', 'Se cancel√≥ la configuraci√≥n del Sistema Pur√©Voice');
		return await interaction.update({
			embeds: [cancelEmbed],
			components: [],
		});
	},
};