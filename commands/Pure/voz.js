const { PureVoiceModel: PureVoice, PureVoiceSessionModel } = require('../../localdata/models/purevoice.js');
const { PureVoiceSessionMember, getFrozenSessionAllowedMembers, makePVSessionName } = require('../../systems/others/purevoice.js');
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, MessageCollector, ButtonStyle, Colors, ChannelType, Collection, ModalBuilder, TextInputStyle, TextInputBuilder } = require('discord.js');
const { p_pure } = require('../../localdata/customization/prefixes.js');
const { isNotModerator, defaultEmoji } = require('../../func.js');
const { CommandOptions, CommandTags, CommandManager } = require('../Commons/commands');
const { makeButtonRowBuilder, makeTextInputRowBuilder } = require('../../tsCasts.js');
const { Translator } = require('../../internationalization');

const cancelbutton = (id) => new ButtonBuilder()
	.setCustomId(`voz_cancelWizard_${id}`)
	.setEmoji('936531643496288288')
	.setStyle(ButtonStyle.Secondary);
const collectors = {};

const options = new CommandOptions()
	.addParam('nombre', 'TEXT', 'para decidir el nombre de la sesi√≥n actual', { optional: true })
	.addFlag('e', ['emote', 'emoji'], 'para determinar el emote de la sesi√≥n actual', { name: 'emt', type: 'EMOTE' })
	.addFlag('i', ['invitar', 'invite'], 'para invitar del canal a la sesi√≥n actual')
	.addFlag('aw', ['asistente','instalador','wizard'], 'para inicializar el Asistente de Configuraci√≥n');
const flags = new CommandTags().add('COMMON');
const command = new CommandManager('voz', flags)
	.setAliases(
		'pur√©voz', 'purevoz',
		'voice', 'pur√©voice', 'purevoice',
		'vc',
	)
	.setBriefDescription('Para inyectar un Sistema Pur√©Voice en una categoria por medio de un Asistente')
	.setLongDescription('Para inyectar un Sistema Pur√©Voice en una categoria. Simplemente usa el comando y sigue los pasos del Asistente para configurar todo')
	.setOptions(options)
	.setExperimentalExecution(async (request, args) => {
		const translator = await Translator.from(request.user);

		if(args.parseFlag('asistente'))
			return generateFirstWizard(request, translator);
		
		//Cambiar nombre de canal de voz de sesi√≥n
		const helpstr = `Usa \`${p_pure(request.guildId).raw}ayuda voz\` para m√°s informaci√≥n`;
		const emoteString = args.parseFlagExpr('emote', x => `${x}`, 'üí†');
		const sessionEmote = defaultEmoji(emoteString);
		const sessionName = args.getString('nombre', true);
		
		if(!sessionName)
			return request.reply({
				content: [
					'‚ö†Ô∏è Debes ingresar un nombre para ejecutar este comando de esta forma',
					'Si est√°s buscando iniciar un Asistente de Configuraci√≥n, usa la bandera `--asistente` o `-a`',
					helpstr,
				].join('\n'),
				ephemeral: true,
			});
		
		if(sessionName.length > 24)
			return request.reply({
				content: '‚ö†Ô∏è Intenta acortar un poco el nombre. El l√≠mite para nombres de sesi√≥n es de 24(+3) caracteres',
				ephemeral: true,
			});

		if(!sessionEmote)
			return request.reply({
				content: [
					'‚ö†Ô∏è Emote inv√°lido',
					'Recuerda que no se pueden usar emotes personalizados para nombres de canales',
					'Tambi√©n, ten en cuenta que algunos emotes est√°ndar de Discord no son *tan est√°ndar* y __no se espera__ que se detecten/funcionen correctamente',
				].join('\n'),
				ephemeral: true,
			});

		//Comprobar si se est√° en una sesi√≥n
		const voiceState = request.member.voice;
		const warnNotInSession = () => request.reply({
			content: translator.getText('voiceCommandRenameMemberExpected', p_pure(request.guildId).raw),
			ephemeral: true,
		}).catch(console.error);

		if(!voiceState?.channelId)
			return warnNotInSession();

		const createInvite = args.parseFlag('invitar');

		if(createInvite) {
			const invite = await request.guild.invites.create(voiceState.channel, { maxAge: 5 * 60 }).catch(_ => null);

			if(invite)
				return request.reply({ content: `${invite}` });

			const channelRef = `${voiceState.channel ?? '‚ö†Ô∏èÔ∏è Canal inv√°lido'}`;
			const embed = new EmbedBuilder()
				.setColor('Blurple')
				.setAuthor({
					name: request.member.displayName,
					iconURL: request.member.displayAvatarURL(),
				})
				.addFields({ name: 'Invitaci√≥n a canal', value: channelRef });

			return request.reply({ embeds: [embed] });
		}

		//Modificar sesi√≥n y confirmar
		const session = await PureVoiceSessionModel.findOne({ channelId: voiceState.channelId });
		if(!session) return warnNotInSession();

		const sessionMember = new PureVoiceSessionMember(session.members.get(request.member.id));
		if(!sessionMember) return warnNotInSession();

		if(sessionMember.isGuest())
			return request.reply({ content: translator.getText('voiceSessionAdminOrModExpected'), ephemeral: true });

		const { channelId: voiceId, roleId, nameChanged } = session;
		if((Date.now() - (+nameChanged)) < 60e3 * 20)
			return request.reply({
				content: [
					'‚ùå Por cuestiones t√©cnicas, solo puedes cambiar el nombre de la sesi√≥n una vez cada 20 minutos.',
					`Int√©ntalo de nuevo <t:${Math.round(+nameChanged / 1000 + 60 * 20)}:R>, o con√©ctate a una nueva sesi√≥n`,
				].join('\n'),
			});
		session.nameChanged = new Date(Date.now());

		const guildChannels = request.guild.channels.cache;
		const guildRoles = request.guild.roles.cache;
		return Promise.all([
			session.save(),
			guildChannels.get(voiceId)?.setName(`${sessionEmote}„Äê${sessionName}„Äë`, 'Renombrar sesi√≥n Pur√©Voice'),
			guildRoles.get(roleId)?.setName(`${sessionEmote} ${sessionName}`, 'Renombrar sesi√≥n Pur√©Voice'),
			request.reply({ content: '‚úÖ Nombre aplicado', ephemeral: true }),
		]).catch(() => request.reply({ content: '‚ö†Ô∏è Ocurri√≥ un error al aplicar el nombre', ephemeral: true }));
	})
	.setButtonResponse(async function startWizard(interaction, authorId) {
		const { user, guild } = interaction;
		
		if(user.id !== authorId)
			return interaction.reply({ content: '‚ùå No puedes hacer esto', ephemeral: true });
		
		const wizard = wizEmbed(interaction.client.user.avatarURL(), '2/? ‚Ä¢ Seleccionar Operaci√≥n', Colors.Navy)
			.addFields({
				name: 'Inyecci√≥n de Sistema Pur√©Voice',
				value: '¬øQu√© deseas hacer ahora mismo?',
			});
			
		const pv = await PureVoice.findOne({ guildId: guild.id });
		const uid = user.id;
		const row = makeButtonRowBuilder();
		const isInstalled = pv && guild.channels.cache.get(pv.categoryId) && guild.channels.cache.get(pv.voiceMakerId);
		if(!isInstalled)
			row.addComponents(
				new ButtonBuilder()
					.setCustomId(`voz_selectInstallation_${uid}`)
					.setLabel('Instalar')
					.setStyle(ButtonStyle.Primary),
			);
		else 
			row.addComponents(
				new ButtonBuilder()
					.setCustomId(`voz_relocateSystem_${uid}`)
					.setLabel('Reubicar')
					.setStyle(ButtonStyle.Primary),
			);

		row.addComponents(
			new ButtonBuilder()
				.setCustomId(`voz_deleteSystem_${uid}`)
				.setLabel('Desinstalar')
				.setStyle(ButtonStyle.Danger)
				.setDisabled(!isInstalled),
			cancelbutton(uid),
		);
		return interaction.update({
			embeds: [wizard],
			components: [row],
		});
	})
	.setButtonResponse(async function selectInstallation(interaction, authorId) {
		if(interaction.user.id !== authorId)
			return interaction.reply({ content: '‚ùå No puedes hacer esto', ephemeral: true });

		const wizard = wizEmbed(interaction.client.user.avatarURL(), '3/4 ‚Ä¢ Seleccionar instalaci√≥n', Colors.Gold)
			.addFields({
				name: 'Instalaci√≥n',
				value: 'Selecciona el tipo de instalaci√≥n que deseas realizar',
			});
		const row = makeButtonRowBuilder().addComponents(
			new ButtonBuilder()
				.setCustomId(`voz_installSystem_${authorId}_new`)
				.setLabel('Crear categor√≠a con Pur√©Voice')
				.setStyle(ButtonStyle.Success),
			new ButtonBuilder()
				.setCustomId(`voz_installSystem_${authorId}`)
				.setLabel('Inyectar Pur√©Voice en categor√≠a')
				.setStyle(ButtonStyle.Primary),
			cancelbutton(authorId),
		);
		return interaction.update({
			embeds: [wizard],
			components: [row],
		});
	})
	.setButtonResponse(async function installSystem(interaction, authorId, createNew) {
		if(interaction.user.id !== authorId)
			return interaction.reply({ content: '‚ùå No puedes hacer esto', ephemeral: true });
		
		const filter = (m) => m.author.id === authorId;
		collectors[interaction.id] = new MessageCollector(interaction.channel, { filter, time: 1000 * 60 * 2 });
		collectors[interaction.id].on('collect', async collected => {
			let ccontent = collected.content;
			let category;
			if(!createNew) {
				if(ccontent.startsWith('<#') && ccontent.endsWith('>')) {
					ccontent = ccontent.slice(2, -1);
					if(ccontent.startsWith('!')) ccontent = ccontent.slice(1);
				}
				const categories = interaction.guild.channels.cache.filter(c => c.type === ChannelType.GuildCategory);
				category = isNaN(ccontent)
					? categories.find(c => c.name.toLowerCase().indexOf(ccontent) !== -1)
					: categories.find(c => c.id === ccontent);
				if(category) {
					collected.delete().catch(() => console.log('Error menor al borrar mensaje recolectado'));
					collectors[interaction.id].stop();
				} else return;
			} else {
				await collected.delete().catch(() => console.log('Error menor al borrar mensaje recolectado'));
				category = await interaction.guild.channels.create({ name: ccontent, type: ChannelType.GuildCategory, reason: 'Categor√≠a recipiente de Pur√©Voice' });
			}
			
			try {
				const voiceMaker = await interaction.guild.channels.create({
					name: '‚ûï',
					type: ChannelType.GuildVoice,
					parent: category.id,
					bitrate: 64 * 1000,
					userLimit: 1,
					reason: 'Desplegar Canal Autoextensible Pur√©Voice',
				});

				await voiceMaker.lockPermissions().catch(console.error);
				await voiceMaker.permissionOverwrites.edit(interaction.guild.roles.everyone, { SendMessages: false }).catch(console.error);
				await voiceMaker.permissionOverwrites.edit(interaction.guild.members.me,     { SendMessages: true  }).catch(console.error);

				//Guardar nueva categor√≠a Pur√©Voice
				const guildQuery = { guildId: interaction.guild.id };
				await PureVoice.deleteOne(guildQuery);
				const pv = new PureVoice({
					...guildQuery,
					categoryId: category.id,
					voiceMakerId: voiceMaker.id,
				});

				const wizard = wizEmbed(interaction.client.user.avatarURL(), 'Operaci√≥n finalizada', Colors.Green)
					.addFields({
						name: 'Categor√≠a creada e inyectada',
						value: [
							'Se ha creado una categor√≠a que ahora escala de forma din√°mica sus canales de voz.',
							`Puedes reubicar el Sistema Pur√©Voice creado en el futuro, solo usa \`${p_pure(interaction.guildId).raw}voz\` otra vez`,
						].join('\n'),
					});

				const finished = await Promise.all([
					pv.save(),
					interaction.message.edit({
						embeds: [wizard],
						components: [],
					}),
				]);
				collectors[interaction.id].stop();
				delete collectors[interaction.id];
				return finished;
			} catch(error) {
				console.error(error);
				return interaction.channel.send({ content: [
					'‚ö†Ô∏è Ocurri√≥ un error al crear esta categor√≠a',
					'Aseg√∫rate de que tenga los permisos necesarios para realizar esta acci√≥n (administrar canales)',
					'Tambi√©n, verifica que el nombre ingresado no est√© ya ocupado por alguna otra categor√≠a o canal',
				].join('\n') });
			}
		});
		
		const wizard = wizEmbed(interaction.client.user.avatarURL(), `4/4 ‚Ä¢ ${createNew ? 'Nombrar' : 'Seleccionar'} categor√≠a`, Colors.Navy)
			.addFields({
				name: `${createNew ? 'Creaci√≥n' : 'Selecci√≥n'} de categor√≠a`,
				value: 'Menciona el nombre de la categor√≠a antes de inyectarle Pur√©Voice',
			});
		const uid = interaction.user.id;
		const row = makeButtonRowBuilder().addComponents(
			new ButtonBuilder()
				.setCustomId(`voz_startWizard_${uid}`)
				.setEmoji('934432754173624373')
				.setStyle(ButtonStyle.Secondary),
			cancelbutton(uid),
		);
		return interaction.update({
			embeds: [wizard],
			components: [row],
		});
	})
	.setButtonResponse(async function deleteSystem(interaction, authorId) {
		if(interaction.user.id !== authorId)
			return interaction.reply({ content: '‚ùå No puedes hacer esto', ephemeral: true });
		
		const wizard = wizEmbed(interaction.client.user.avatarURL(), 'Confirmar desinstalaci√≥n', Colors.Yellow)
			.addFields({
				name: 'Desinstalaci√≥n del Sistema Pur√©Voice del servidor',
				value: [
					'Esto borrar√° todas los canales creados por el Sistema. La categor√≠a del Sistema y los canales creados manualmente se ignorar√°n.',
					'Confirma la desasociaci√≥n del servidor con Pur√©Voice',
				].join('\n'),
			});
		const uid = interaction.user.id;
		const row = makeButtonRowBuilder().addComponents(
			new ButtonBuilder()
				.setCustomId(`voz_deleteSystemConfirmed_${uid}`)
				.setLabel('DESINSTALAR')
				.setStyle(ButtonStyle.Danger),
			new ButtonBuilder()
				.setCustomId(`voz_startWizard_${uid}`)
				.setEmoji('934432754173624373')
				.setStyle(ButtonStyle.Secondary),
			cancelbutton(uid),
		);
		return interaction.update({
			embeds: [wizard],
			components: [row],
		});
	})
	.setButtonResponse(async function deleteSystemConfirmed(interaction, authorId) {
		if(interaction.user.id !== authorId)
			return interaction.reply({ content: '‚ùå No puedes hacer esto', ephemeral: true });

		//Eliminar Sistema Pur√©Voice
		const guildQuery = { guildId: interaction.guildId };
		const pv = await PureVoice.findOne(guildQuery);
		if(pv) {
			const guildChannels = interaction.guild.channels.cache;
			await Promise.all([
				guildChannels.get(pv.voiceMakerId)?.delete(`Pur√©Voice desinstalado por ${interaction.user.username}`).catch(console.error),
				guildChannels.get(pv.controlPanelId)?.delete(`Pur√©Voice desinstalado por ${interaction.user.username}`).catch(console.error),
			]);

			await Promise.all([
				PureVoiceSessionModel.deleteMany({ channelId: { $in: pv.sessions } }),
				PureVoice.deleteOne(guildQuery),
			]);
		}
		
		const deleteEmbed = wizEmbed(interaction.client.user.avatarURL(), 'Operaci√≥n finalizada', Colors.Red)
			.addFields({
				name: 'Sistema Pur√©Voice eliminado',
				value: 'Se elimin√≥ el Sistema Pur√©Voice asociado al servidor',
			});
		return interaction.update({
			embeds: [deleteEmbed],
			components: [],
		});	
	})
	.setButtonResponse(async function cancelWizard(interaction, authorId) {
		if(interaction.user.id !== authorId)
			return interaction.reply({ content: '‚ùå No puedes hacer esto', ephemeral: true });
		
		const cancelEmbed = wizEmbed(interaction.client.user.avatarURL(), 'Operaci√≥n abortada', Colors.NotQuiteBlack)
			.addFields({
				name: 'Asistente cancelado',
				value: 'Se cancel√≥ la configuraci√≥n del Sistema Pur√©Voice'
			});
		return interaction.update({
			embeds: [cancelEmbed],
			components: [],
		});
	})
	.setButtonResponse(async function setSessionName(interaction) {
		const { guildId, member } = interaction;
        const translator = await Translator.from(member);

		const warnNotInSession = () => interaction.reply({
			content: '‚ö†Ô∏è Debes entrar a una sesi√≥n Pur√©Voice para realizar esta acci√≥n',
			ephemeral: true,
		}).catch(console.error);

		const voiceChannel = member.voice?.channel;
		if(!voiceChannel) return warnNotInSession();

		const session = await PureVoiceSessionModel.findOne({ channelId: voiceChannel.id });
		if(!session) return warnNotInSession();
		
        const modal = new ModalBuilder()
            .setCustomId(`voz_applySessionRename`)
            .setTitle(translator.getText('yoVoiceAutonameModalTitle'))
            .addComponents(
                makeTextInputRowBuilder().addComponents(new TextInputBuilder()
                    .setCustomId('inputName')
                    .setLabel(translator.getText('name'))
                    .setPlaceholder(translator.getText('yoVoiceAutonameModalNamingPlaceholder'))
                    .setMinLength(1)
                    .setMaxLength(24)
                    .setRequired(true)
					//.setValue(session.name ?? '')
                    .setStyle(TextInputStyle.Short)),
                makeTextInputRowBuilder().addComponents(new TextInputBuilder()
                    .setCustomId('inputEmoji')
                    .setLabel(translator.getText('emoji'))
                    .setPlaceholder(translator.getText('yoVoiceAutonameModalEmojiPlaceholder'))
                    .setMinLength(0)
                    .setMaxLength(2)
                    .setRequired(false)
					//.setValue(session.emoji ?? '')
                    .setStyle(TextInputStyle.Short)),
            );

        return interaction.showModal(modal);
	})
	.setModalResponse(async function applySessionName(interaction) {
		await interaction.deferReply({ ephemeral: true });

		const { guildId, member } = interaction;
        const translator = await Translator.from(member);

		const warnNotInSession = () => interaction.editReply({
			content: '‚ö†Ô∏è Debes entrar a una sesi√≥n Pur√©Voice para realizar esta acci√≥n',
		}).catch(console.error);

		const voiceChannel = member.voice?.channel;

		const session = await PureVoiceSessionModel.findOne({ channelId: voiceChannel.id });
		if(!session) return warnNotInSession();

		const name = interaction.fields.getTextInputValue('inputName');
		const emoji = interaction.fields.getTextInputValue('inputEmoji');

		if(!emoji) {
			voiceChannel.setName(makePVSessionName(name)).catch(console.error);
			return interaction.editReply({ content: '‚úÖ Nombre aplicado' });
		}

		const defEmoji = defaultEmoji(emoji);
		if(!defEmoji)
			return interaction.reply({ content: '‚ö†Ô∏è El emoji indicado no es un emoji Unicode v√°lido' });
		
		voiceChannel.setName(makePVSessionName(name, defEmoji)).catch(console.error);
		return interaction.editReply({ content: '‚úÖ Nombre aplicado' });
	})
	.setButtonResponse(async function freezeSession(interaction) {
		await interaction.deferReply({ ephemeral: true });

		const { member } = interaction;
        const translator = await Translator.from(member);

		const warnNotInSession = () => interaction.editReply({
			content: '‚ö†Ô∏è Debes entrar a una sesi√≥n Pur√©Voice para realizar esta acci√≥n',
		}).catch(console.error);

		const voiceState = member.voice;
		if(!voiceState) return warnNotInSession();

		const voiceChannel = voiceState.channel;
		if(!voiceChannel) return warnNotInSession();

		const session = await PureVoiceSessionModel.findOne({ channelId: voiceChannel.id });
		if(!session) return warnNotInSession();

		const sessionMember = new PureVoiceSessionMember(session.members.get(member.id) ?? {});
		if(sessionMember.isGuest())
			return interaction.editReply({
				content: '‚ùå Solo el administrador y los moderadores de una sesi√≥n Pur√©Voice pueden congelarla',
			});

		session.frozen = !session.frozen;

		const allowedMembers = getFrozenSessionAllowedMembers(voiceChannel, session.members);
		const userLimit = session.frozen ? allowedMembers.size : 0;

		for(const [ memberId, member ] of allowedMembers) {
			session.members.set(memberId, member.setWhitelisted(true).toJSON());
			await voiceChannel.permissionOverwrites.edit(memberId, { Connect: true }, { reason: 'PLACEHOLDER_PV_REASON_FREEZE_CONNECT_ENABLE' }).catch(console.error);
		}

		session.markModified('members');

		await Promise.all([
			voiceChannel.setUserLimit(userLimit, `Actualizar l√≠mite de usuarios de sesi√≥n Pur√©Voice ${session.frozen ? 'congelada' : 'descongelada'}`).catch(console.error),
			voiceChannel.permissionOverwrites.edit(interaction.guild.roles.everyone, { Connect: false }, { reason: 'PLACEHOLDER_PV_REASON_FREEZE_CONNECT_DISABLE' }).catch(console.error),
			session.save(),
		]);
		
		return interaction.editReply({
			content: `‚ùÑÔ∏è La sesi√≥n ${voiceChannel} fue **${session.frozen ? 'congelada' : 'descongelada'}**`,
		});
	})
	.setButtonResponse(async function showMeHow(interaction) {
		const commandName = `${p_pure(interaction.guildId).raw}voz`;
		return interaction.reply({
			content: [
				'Ejemplos:',
				`> ${commandName}  Gaming   --emote  üéÆ`,
				`> ${commandName}  Noche de Acapella   -e  üé§`,
				`> ${commandName}  --emoji  üéß   M√∫sica de Fondo`,
				`> ${commandName}  -e  üéâ   Aniversario`,
				'Resultados:',
				`> üéÆ„ÄêGaming„Äë`,
				`> üé§„ÄêNoche de Acapella„Äë`,
				`> üéß„ÄêM√∫sica de Fondo„Äë`,
				`> üéâ„ÄêAniversario„Äë`,
			].join('\n'),
			ephemeral: true,
		});
	});

/**
 * @param {String} iconUrl
 * @param {String} stepName
 * @param {import('discord.js').ColorResolvable} stepColor
 */
function wizEmbed(iconUrl, stepName, stepColor) {
	return new EmbedBuilder()
		.setColor(stepColor)
		.setAuthor({ name: 'Asistente de Configuraci√≥n de Sistema Pur√©Voice', iconURL: iconUrl })
		.setFooter({ text: stepName });
}

/**
 * @param {import('../Commons/typings.js').ComplexCommandRequest} request
 * @param {Translator} translator
 */
function generateFirstWizard(request, translator) {
	if(isNotModerator(request.member)) return request.reply({ content: translator.getText('insufficientPermissions'), ephemeral: true });
	const wizard = wizEmbed(request.client.user.avatarURL(), '1/? ‚Ä¢ Comenzar', Colors.Aqua)
		.addFields({
			name: translator.getText('welcome'),
			value: 'Si es la primera vez que configuras un Sistema Pur√©Voice, ¬°no te preocupes! Solo sigue las instrucciones del Asistente y adapta tu Feed a lo que quieras',
		});
	const uid = request.userId;
	return request.reply({
		embeds: [wizard],
		components: [new ActionRowBuilder().addComponents(
			new ButtonBuilder()
				.setCustomId(`voz_startWizard_${uid}`)
				.setLabel('Comenzar')
				.setStyle(ButtonStyle.Primary),
			cancelbutton(uid),
		)],
	});
}

module.exports = command;